<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>冒个泡</title>
      <link href="/2023/04/30/mou-ge-pao/"/>
      <url>/2023/04/30/mou-ge-pao/</url>
      
        <content type="html"><![CDATA[<h2 id="冒个泡"><a href="#冒个泡" class="headerlink" title="冒个泡"></a>冒个泡</h2><p>难得假期，随便更新一下，证明自己人还在😶‍🌫️</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 划水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《汇编语言》</title>
      <link href="/2023/01/19/hui-bian-yu-yan-du-shu-bi-ji/"/>
      <url>/2023/01/19/hui-bian-yu-yan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《汇编语言》读书笔记"><a href="#《汇编语言》读书笔记" class="headerlink" title="《汇编语言》读书笔记"></a>《汇编语言》读书笔记</h1><h2 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h2><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>存储器被划分成若干个存储单元，每个存储单元从0开始顺序编号，例如一个存储器有128个存储单元，编号从<strong>0</strong>~<strong>127</strong>。<br>电子计算机的最小信息单位是bit，也就是一个二进制位。<br>8个bit组成一个Byte，也就是通常所讲的一个字节。<br>微型计算机存储器的存储单元可以存储一个Byte，即8个二进制位。<br>一个存储器有128个存储单元 ，它可以存储128个Byte。</p><p>微型存储器的容量是以字节为最小单位来计算的。对于拥有128个存储单元的存储器，我们可以说，它的容量是128个字节。</p><p>1KB=1024B   1MB=1024KB  1GB=1024MB  1TB=1024GB</p><h3 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h3><h4 id="三类信息交互"><a href="#三类信息交互" class="headerlink" title="三类信息交互"></a>三类信息交互</h4><ul><li>存储单元的地址（地址信息）</li><li>器件的选择，读或写的命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><p>总线：在计算机中专门有连接CPU和其他芯片（外部器件）的导线，通常称为总线。<br>分为三类 ：地址总线、控制总线和数据总线。</p><h3 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h3><p>CPU通过地址总线来指定存储器单元。<br>一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。</p><h3 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h3><p>CPU与内存或其他器件之间的数据传送是通过数据总线来进行的。<br>数据总线的宽度决定了CPU和外界的数据传送速度。</p><blockquote><p>8根数据总线一次可传送一个8位二进制数据（即一个字节）<br>16根数据总线一次可传送两个字节</p></blockquote><h3 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h3><p>CPU对外部器件的控制是通过控制总线来进行的。</p><blockquote><p>在这里控制总线是个总称，控制总线是一些不同控制线的集合。<br>有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。<br>所以，控制总线的宽度决定了CPU对外部器件的控制能力。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>汇编指令是机器指令的助记符，同机器指令一一对应。</p></li><li><p>每一种CPU都有自己的汇编指令集。</p></li><li><p>CPU可以直接使用的信息在存储器中存放。</p></li><li><p>在存储器中指令和数据没有任何区别，都是二进制信息。</p></li><li><p>存储单元从零开始顺序编号。</p></li><li><p>一个存储单元可以存储8个bit，即8位二进制数。</p></li><li><p>1Byte=8bit  1KB=1024B  1MB=1024KB  1GB=1024MB</p></li><li><p>每一个CPU芯片都有许多管脚，这些管脚和总线相连。也可以说，这些管脚引出总线。一个CPU可以引出3种总线的宽度标志了这个CPU不同方面的性能：</p><blockquote><p>地址总线的宽度决定了CPU的寻址能力；<br>数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量；<br>控制总线的宽度决定了CPU对系统中其他器件的控制能力。</p></blockquote></li></ol><hr><h3 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><blockquote><p>一个CPU的地址总线宽度是10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。</p></blockquote><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><p>在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连。这些器件有CPU、存储器、外围芯片组、扩展插槽等。扩展插槽上一般插有RAM内存条和各类接口卡。</p><h3 id="接口卡"><a href="#接口卡" class="headerlink" title="接口卡"></a>接口卡</h3><p>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。<br>CPU对外部设备都不能直接控制，如显示器、音箱、打印机。<br>直接控制这些设备进行工作的是插在扩展插槽上的接口卡，从而实现CPU对外设的间接控制。<br>简单地讲，就是CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作。</p><h3 id="各类存储器芯片"><a href="#各类存储器芯片" class="headerlink" title="各类存储器芯片"></a>各类存储器芯片</h3><p>一台PC机，装有多个存储器芯片，这些存储器芯片从物理连接上看是独立的、不同的器件。<br>从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM）。<br>    随机存储可读可写，但必须带电存储，关机后存储的内容丢失；<br>    只读存储器只能读取不能写入，关机后其中内容不丢失。</p><blockquote><p>这些存储器从功能和连线上又可分为以下几类：</p><ul><li><p>随机存储器<br>用于存放供CPU使用的绝大部分程序和数据，<br>主随机存储器一般由两个位置上的RAM组成，<br>装在主板上的RAM和插在扩展槽上的RAM。</p></li><li><p>装有BIOS（Basis Input/Output System, 基本输入/输出系统）的ROM<br>BIOS是由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。<br>在主板和某些接口卡上插有存储相应BIOS的ROM。<br>例如，主板上的ROM中存储着主板的BIOS（通常称为系统BIOS）；显卡上的ROM中存储着显卡的BIOS；如果网卡上装有ROM，那其中就可以存储网卡的BIOS。</p></li><li><p>接口卡上的RAM<br>某些接口卡需要对大批量输入、输出数据进行暂时存储，在其上装有RAM。<br>最典型的是显示卡上的RAM，一般称为显存。<br>显示卡随时将显存中的数据向显示器上输出。<br>换句话说，我们将需要显示的内容写入显存，就会出现在显示器上。·</p></li></ul></blockquote><h3 id="内存地址空间-1"><a href="#内存地址空间-1" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><p>上面的那些存储器，在物理上是独立的器件，但是再一下两点上相同。</p><ul><li>都和CPU的总线相连。</li><li>CPU对它们进行读或写的时候都通过控制线发出内存读写命令。</li></ul><p>这也就是说，CPU在操控它们的时候，把它们都当做内存来对待，把它们总的看作一个由若干存储单元组成的逻辑存储器，这个逻辑存储器就是我们所说的内存地址空间。<br>在汇编这门课，我们所面对的是内存地址空间</p><p>内存地址空间的大小受CPU地址总线宽度的限制。8086CPU的地址总线宽度为20，可以传送2^20个不同的地址信息（大小从0至2^20-1）。<br>即可以定位2^20个内存单元，则8086PC的内存地址空间大小为1MB。<br>同理，80386CPU的地址总线总数为32，则内存地址空间最大为4GB。</p><blockquote><p>最终运行程序的是CPU，我们用汇编语言编程的时候，必须要从CPU的角度考虑问题。<br>对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。<br>这个逻辑存储器即是我们所说的内存地址空间。</p></blockquote><hr><h2 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章 寄存器"></a>第2章 寄存器</h2><p>一个典型的CPU由运算器、控制器、寄存器（CPU工作原理）等器件构成，这些器件靠内部总线相连。<br>前一章所说的总线，相对于CPU内部来说是外部总线。<br>内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系。<br>简单地说，在CPU中：</p><ul><li>运算器进行信息处理；</li><li>寄存器进行信息存储；</li><li>控制器控制各种器件进行工作；</li><li>内部总线连接各种器件，在它们之间进行数据的传送。</li></ul><p>寄存器是CPU中程序员可以用指令读写的部件。<br>程序员通过改变各种寄存器中的内容来实现对CPU的控制。</p><p>不同的CPU，寄存器的个数、结构是不相同的。<br>8086CPU有14个寄存器，每个寄存器有一个名称。<br>这些寄存器是：AX、BX、CX 、DX 、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。</p><h3 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1 通用寄存器"></a>2.1 通用寄存器</h3><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。<br>AX、BX、CX、DX这4个寄存器通常涌来存放一般性的数据，被称为通用寄存器。</p><p>8086CPU的上一代CPU种的寄存器都是8位的，为了保证兼容，使原来基于上代CPU编写的程序稍加修改就可以运行再8086之上，8086CPU的AX、BX、CX、DX这4个寄存器都可分为两个可独立使用的8位寄存器来用：</p><ul><li>AX可分为AH和AL；</li><li>BX可分为BH和BL；</li><li>CX可分为CH和CL；</li><li>DX可分为DH和DL。</li></ul><table><thead><tr><th>寄存器</th><th>寄存器中的数据</th><th>所表示的值</th></tr></thead><tbody><tr><td>AX</td><td>100111000100000</td><td>20000(4E20H)</td></tr><tr><td>AH</td><td>01001110</td><td>78(4EH)</td></tr><tr><td>AL</td><td>00100000</td><td>32(20H)</td></tr></tbody></table><h3 id="2-2-字在寄存器中的存储"><a href="#2-2-字在寄存器中的存储" class="headerlink" title="2.2 字在寄存器中的存储"></a>2.2 字在寄存器中的存储</h3><p>出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据。</p><ul><li>字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中</li><li>字： 记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li></ul><p>一个字节可以存在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。一个字型数据20000，存在AX寄存器中，在AH中存储了它的高8位，在AL中存储了它的低8位。<br>AH和AL中的数据，既可以看成是一个字型数据的高8位和低8位，这个字型数据的大小是20000；又可以看成是两个独立的字节型数据，它们的大小分别是78和32.</p><blockquote><p>关于数制的讨论</p><p>任何数据，到了计算机中都是以二进制的形式存放的。为了描述不同的问题，又经常将它们用其他的进制来表示。比如寄存器AX中的数据是0100111000100000，这就是AX中的信息本身，可以用不同的逻辑意义来看待它。可以将它看作一个数值，大小是20000。</p><p>当然，二进制数100111000100000本身也可表示一个数值的大小，但人类习惯的是十进制，用十进制20000表示可以使我们直观地感受到这个数值的大小。</p><p>十六进制数的一位相当于二进制数的四位，如0100111000100000可表示成：4(0100)、E(1110)、2(0010)、0(0000)四位十六进制数。</p><p>一个内存单位可存放8位数据，CPU中的寄存器又可存放n个8位的数据。也就是说，计算机中的数据大多是由1~N个8位数据构成的。很多时候，需要直观地看出组成数据的各个字节数据的值，用十六进制来表示数据可以直观地看出这个数据是由哪些8位数据构成的。比如20000写成4E20就可以直观地看出，这个数据是由4E和20两个8位数据构成的，如果AX种存放4E20，则AH里是4E，AL里是20.这种表示方法便于许多问题的直观分析。在以后的课程中，我们多用十六进制来表示一个数据</p><p>在以后的课程中，为了区分不同的进制，在十六进制表示的数据的后面加H，在二进制表示的数据后面加B，十进制表示的数据后面什么也不加。如：可用3种不同的进制表示表格种AX里的数据，十进制：20000，十六进制：4E20H，二进制：0100111000100000B、</p></blockquote><h3 id="2-3-几条汇编指令"><a href="#2-3-几条汇编指令" class="headerlink" title="2.3 几条汇编指令"></a>2.3 几条汇编指令</h3><p>通过汇编指令控制CPU进行工作，看一下表中的几条指令。</p><table><thead><tr><th>汇编指令</th><th>控制CPU完成的操作</th><th>用高级语言的语法描述</th></tr></thead><tbody><tr><td>mov ax,18</td><td>将18送入寄存器AX</td><td>AX=18</td></tr><tr><td>mov ah,78</td><td>将78送入寄存器AH</td><td>AH=78</td></tr><tr><td>add ax,8</td><td>将寄存器AX中的数值加上8</td><td>AX=AX+8</td></tr><tr><td>mov ax,bx</td><td>将寄存器BX中的数据送入寄存器AX</td><td>AX=BX</td></tr><tr><td>add ax,bx</td><td>将AX和BX中的数值相加，结果存在AX种</td><td>AX=AX+BX</td></tr></tbody></table><p>注意，为了使具有高级语言基础的读者更好地理解指令的含义，有时会用文字描述和高级语言描述着两种方式来描述一条汇编指令的含义。在写一条汇编指令或一个寄存器的名称时不区分大小写。如：mov ax,18和MOV AX,18的含义相同；bx和BX的含义相同。</p><p>接下来看一下CPU执行上表中所列的程序段中的每条指令后，对寄存器中的数据进行的改变。<br>（原AX中的值：0000H，原BX中的值：0000H）</p><table><thead><tr><th>程序段中的指令</th><th>指令执行后AX中的数据</th><th>指令执行后</th></tr></thead><tbody><tr><td>mov ax,4E20H</td><td>4E20H</td><td>0000H</td></tr><tr><td>add ax,1406H</td><td>6226H</td><td>0000H</td></tr><tr><td>mov bx,2000H</td><td>6226H</td><td>2000H</td></tr><tr><td>add ax,bx</td><td>8226H</td><td>2000H</td></tr><tr><td>mov bx,ax</td><td>8226H</td><td>8226H</td></tr></tbody></table><p>在进行数据传送或运算时，要注意指令的两个操作对象的位数应当是一致的。</p><h3 id="2-4-物理地址"><a href="#2-4-物理地址" class="headerlink" title="2.4 物理地址"></a>2.4 物理地址</h3><p>CPU访问内存单元时，要给出内存单元的地址。所有内存单元构成的存储空间是一个一维的线性空间内，每一个内存单元再这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址。</p><p> CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的形成物理地址的方式。我们现在讨论8086CPU是如何在内部形成内存单元的物理地址的。</p><h3 id="2-5-16位结构的CPU"><a href="#2-5-16位结构的CPU" class="headerlink" title="2.5 16位结构的CPU"></a>2.5 16位结构的CPU</h3><p>概括地讲，16位结构（16位机、字长为16位等常见说法，与16位结构的含义相同）描述了一个CPU具有下面几方面的结构特性。</p><ul><li>运算器一次最多可以处理16位的数据；</li><li>寄存器的最大宽度为16位；</li><li>寄存器和运算器之间的通路为16位。</li></ul><p>8086是16位结构的CPU，这也就是说，在8086内部，能够一次性处理、传输、暂时存储的信息的最大长度是16位的。<br>内存单元的地址再送上地址总线之前，必须在CPU中处理、传输、暂时存放，对于16位CPU，能一次性处理、传输、暂时存储16位的地址。</p><h3 id="2-6-8086CPU给出物理地址的方法"><a href="#2-6-8086CPU给出物理地址的方法" class="headerlink" title="2.6 8086CPU给出物理地址的方法"></a>2.6 8086CPU给出物理地址的方法</h3><p>8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。<br>8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为1位。<br>从8086CPU的内部结构来看，如果将地址从内部简单地发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB。</p><p>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。</p><p>8086CPU要读写内存时：</p><ol><li>CPU中的相关部件提供两个16位地址，一个称为段地址，另一个称为偏移地址；</li><li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件；</li><li>地址加法器将两个16位地址合成为一个20位的物理地址；</li><li>地址加法器通过内部总线将20位物理地址送入输入输出控制电路；</li><li>输入输出控制电路将20位物理地址送上地址总线；</li><li>20位物理地址被地址总线传送到储存器。</li></ol><p>地址加法器采用<strong>物理地址=段地址×16+偏移地址</strong>的方法用段地址和偏移地址合成物理地址。</p><p>例如，8086CPU要访问地址为123C8H的内存单元，此时，地址加法器的工作过程如下所示：</p><ol><li>相关部件提供段地址和偏移地址（1230，00C8）</li><li>段地址和偏移地址送入（1230，00C8）</li><li>段地址×16（12300，00C8）</li><li>段地址×16+偏移地址，得出物理地址（12300+00C8=123C8）</li><li>输出物理地址（123C8）</li></ol><blockquote><p>由段地址×16引发的讨论</p><p>“段地址×16”有一个更为常见的说法是左移4位。<br>计算机中的所有信息都是以二进制的形式存储的，段地址当然也不例外。<br>机器只能处理二进制信息，“左移4位”中的位，指的是二进制位。</p><p> 我们来看一个例子，一个数据为2H，二进制形式为10B， 对其进行左移运算：</p><table><thead><tr><th>左移位数</th><th>二进制</th><th>十六进制</th><th>十进制</th></tr></thead><tbody><tr><td>0</td><td>10B</td><td>2H</td><td>2</td></tr><tr><td>1</td><td>100B</td><td>4H</td><td>4</td></tr><tr><td>2</td><td>1000B</td><td>8H</td><td>8</td></tr><tr><td>3</td><td>10000B</td><td>10H</td><td>16</td></tr><tr><td>4</td><td>100000B</td><td>20H</td><td>32</td></tr></tbody></table><p>观察上面移位次数和各种形式数据的关系，我们可以发现：</p><ol><li>一个数据的二进制形式左移1位，相当于该数据乘以2；</li><li>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；</li><li>地址加法器如何完成段地址×16的运算？就是将以二进制数据存放的段地址左移4位。</li></ol><p>进一步思考，我们可以看出：<br>一个数据的十六进制形式左移1位，相当于乘以16；<br>一个数据的十进制形式左移1位，相当于乘以10；<br>一个X进制的数据左移1位，相当于乘以X。</p></blockquote><h3 id="2-7-“段地址×16-偏移地址-x3D-物理地址”的本质含义"><a href="#2-7-“段地址×16-偏移地址-x3D-物理地址”的本质含义" class="headerlink" title="2.7 “段地址×16+偏移地址=物理地址”的本质含义"></a>2.7 “段地址×16+偏移地址=物理地址”的本质含义</h3><p>“段地址×16+偏移地址=物理地址”的本质含义是：<br>CPU在访问内存时，用一个基础地址（段地址×16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址。</p><p>更一般地说，8086CPU的这种寻址功能是<strong>“基础地址+偏移地址=物理地址”</strong>寻址模式的一种具体实现方案。<br>8086CPU中，段地址×16可看作是基础地址。</p><h3 id="2-8-段的概念"><a href="#2-8-段的概念" class="headerlink" title="2.8 段的概念"></a>2.8 段的概念</h3><p>段的划分来自于CPU，由于8086CPU用“基础地址（段地址）+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。</p><p>以后，在编程时可以根据需要， 将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。<br>有两点需要注意：<br>段地址×16必然是16的倍数，所以一个段的起始地址也一定是16的被上诉；<br>偏移地址为16位，16位地址的寻址能力为64KB，所以一个段的长度最大为64KB.</p><blockquote><p>内存单元地址小结</p><p>CPU访问内存单元时，必须向内存提供内存单元的物理地址。<br>8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址。</p><p>思考下面的两个问题</p><ol><li>观察下面的地址，你有什么发现？</li></ol><table><thead><tr><th>物理地址</th><th>段地址</th><th>偏移地址</th></tr></thead><tbody><tr><td>21F60H</td><td>2000H</td><td>1F60H</td></tr><tr><td></td><td>2100H</td><td>0F60H0</td></tr><tr><td></td><td>21F0H</td><td>0060H</td></tr><tr><td></td><td>21F6H</td><td>0000H</td></tr><tr><td></td><td>1F00H</td><td>2F60H</td></tr></tbody></table><p>结论：CPU可以用不同的段地址和偏移地址形成同一个物理地址。</p><p>比如CPU要访问21F60H单元，则它给出的段地址SA和偏移地址EA满足SA×16+EA=21F60H即可。</p><ol start="2"><li>如果给定一个段地址，仅通过变化偏移地址来进行，最多可定位多少个内存单元？</li></ol><p>结论：偏移地址16位，变化范围为0~FFFFH，仅用偏移地址来寻址最多可寻64KB个内存单元。</p><p>比如给定段地址1000H，用偏移地址寻址，CPU的寻址范围为：10000H~1FFFFH。</p><p>在8086PC机中，存储单元的地址用两个元素来描述，即段地址和偏移地址。</p><p>“数据在21F60内存单元中。”这句话对于8086PC机一般不这样讲，取而代之的是两种类似的说法：</p><ol><li>数据存在内存2100:1F60单元中；</li><li>数据存在内存的2000H段中的1F60H单元中。</li></ol><p>这两种描述都表示“数据在内存21F60H单元中”。</p><p>可以根据需要，将地址连续、起始地址为16的倍数的一组内存单元定义为一个段。</p></blockquote><h3 id="2-9-段寄存器"><a href="#2-9-段寄存器" class="headerlink" title="2.9 段寄存器"></a>2.9 段寄存器</h3><p>我们前面讲到，8086CPU在访问内存时要由相关部件提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址。<br>这里，需要看一下，是什么部件提供段地址。<br>段地址在8086CPU中的段寄存器中存放。<br>80986CPU中4个段寄存器：CS、DS、SS、ES。<br>当80986CPU要访问内存时由这4个段寄存器提供内存单元的段地址。本章中只看一下CS</p><h3 id="2-10-CS和IP"><a href="#2-10-CS和IP" class="headerlink" title="2.10 CS和IP"></a>2.10 CS和IP</h3><p>CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地址。<br>CS为代码段寄存器，IP为指令指针寄存器，从名称上我们可以看出它们和指令的关系。</p><p>在8086PC机中，任意时刻，CPU将CS:IP指向的内容当作指令执行。</p><p>8086CPU读取、执行指令的工作原理：</p><ol><li>8086CPU当前状态：CS中的内容为2000H，IP中的内容为0000H；；</li><li>内存20000H~20009H单元存放着可执行的机器码；</li><li>内存20000H~20009H单元中存放的机器码对应的汇编指令如下。</li></ol><p>地址：20000H~20002H，内容：B8 23 01，长度：3Byte，对应汇编指令： mov ax,0123H</p><p>地址：20003H~20005H，内容：BB 03 00，长度：3Byte，对应汇编指令： mov bx,0003H</p><p>地址：20006H~20007H，内容：89 D8，长度：2Byte，对应汇编指令：mov ax,bx</p><p>地址：20008H~20009H，内容：01 D8，长度：2Byte，对应汇编指令：add ax,bx</p><p>8086CPU的工作过程可以简要描述如下：</p><ol><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li><li>IP=IP+所读取指令的长度，从而指向下一条指令；</li><li>执行指令。转到步骤1，重复这个过程。</li></ol><p>在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H，即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行，FFFF0H单元中的指令是8086PC机开机后执行的第一条指令。</p><p>现在，我们更清楚CS和IP的重要性，它们的内容提供了CPU要执行指令的地址。</p><p>我们在第1章讲过，在内存中，指令和数据没有区别，都是二进制信息，CPU在工作的时候把有的信息看作指令，有的信息看作数据。<br>现在，如果提出一个问题：CPU根据什么将内存中的信息看作指令？如何回答？<br>我们可以说，CPU将CS:IP指向的内存单元中的内容看作指令，因为，在任何时候，CPU将CS、IP中的内容当作指令的段地址和偏移地址，用它们合成指令的物理地址，到内存中读取指令码，执行。<br>如果说，内存中的一段信息曾被CPU执行过的话，那么，它所在的内存单元必然被CS:IP指向过。</p><h3 id="2-11-修改CS、IP的指令"><a href="#2-11-修改CS、IP的指令" class="headerlink" title="2.11 修改CS、IP的指令"></a>2.11 修改CS、IP的指令</h3><p>在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。<br>CPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。</p><p>我们如何改变CS、IP中的值呢？显然，8086CPU必须提供相应的指令。<br>我们如何修改AX中的值？可以用mov指令，如mov ax,123将ax中的值设为123，<br>显然，我们也可以用同样的方法设置其他寄存器的值，如mov bx,123，mov cx,123，mov cx,123，mov dx,123等。<br>其实，8086CPU大部分寄存器的值，都可以用mov指令来改变，mov指令被称为传送指令。</p><p>但是，mov指令不能用于设置CS、IP的值，原因很简单，因为8086CPU没有提供这样的功能。<br>8086CPU为CS、IP提供了另外的指令来改变它们的值。<br>能够改变CS、IP的内容的指令被统称为转移指令（我们以后会深入探究）。<br>我们现在介绍一个最简单的可以修改CS、IP的指令：jmp指令。</p><p>若想同时修改CS、IP的内容，可用形如“jmp 段地址:偏移地址”的指令完成，如：</p><p>jmp 2AE3:3，执行后：CS=2AE3H，IP=0003H，CPU将从2AE33H处读取指令。</p><p>jmp 3:0B16，执行后：CS=0003H，IP=0B16H，CPU将从00B46H处读取指令。</p><p>“jmp 段地址:偏移地址”指令的功能为：用指令中给出的段地址修改CS，偏移地址修改IP。</p><p>若想仅修改IP的内容，可用形如“jmp 某一合法寄存器”的指令完成，如</p><p>jmp ax，指令执行前：ax=1000H，CS=2000H，IP=0003H<br>                指令执行后：ax=1000H，CS=2000H ，IP=1000H</p><p>jmp bx，指令执行前：bx=0B16H，CS=2000H，IP=0003H<br>                指令执行后：bx=0B16H，CS=2000H，IP=0B16H</p><p>“jmp 某一合法寄存器”指令的功能为：用寄存器中的值修改IP。</p><p>jmp ax，在含义上好似：mov IP,ax。</p><p>注意，我们在适当的时候，会用已知的汇编指令的语法来描述新学的汇编指令的功能。<br>采用一种“用汇编解释汇编”的方法来使读者更好地理解汇编指令的功能，这样做有助于读者进行知识的相互融会。<br>要强调的是，我们是用“已知的汇编指令的语法”进行描述，并不是用“已知的汇编指令”来描述，<br>比如，我们用mov IP,ax来描述jmp ax，并不是说真有mov IP,ax这样的指令，而是用mov指令的语法来说明jmp指令的功能。<br>我们可以用同样的方法描述jmp 3:01B6的功能：jmp 3:01B6在含义上好似mov CS,3 mov IP,01B6。</p><h3 id="2-12-代码段"><a href="#2-12-代码段" class="headerlink" title="2.12 代码段"></a>2.12 代码段</h3><p>前面讲过，对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。<br>我们可以将长度为N（N≤64KB）的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元中，我们可以认为，这段内存是用来存放代码的，从而定义了一个代码段。<br>比如，将：</p><table><thead><tr><th>mov ax,0000</th><th>(B8 00 00)</th></tr></thead><tbody><tr><td>add ax,0123H</td><td>(05 23 01)</td></tr><tr><td>mov bx,ax</td><td>(8B D8)</td></tr><tr><td>jmp bx</td><td>(FF E3)</td></tr></tbody></table><p>这段长度为10个字节的指令，存放在123B0H<del>123B9H的一组内存单元中，我们可以认为，123B0H</del>123B9H这段内存是用来存放代码的，是一个代码段，它的段地址为123BH，长度为10个字节。</p><p>如何使得代码段中的指令被执行呢？将一段内存当作代码段，仅仅是我们在编程时的一种安排，CPU并不会由于这种安排，就自动地将我们定义的代码段中的指令当作指令来执行。CPU只认被CS:IP指向的内存单元中的内容为指令。<br>所以，要让CPU执行我们放在代码段中的指令，必须要将CS:IP指向所定义的代码段中的第一条指令的首地址。<br>对于上面的例子，我们将一端代码存放在123B0H~123B9H内存单元中，将其定义为代码段，如果要让这段代码得到执行，可设CS=123BH、IP=0000H。</p><blockquote><p>2.9~2.12 小 结</p><ol><li>段地址在8086CPU的段寄存器中存放。<br>当8086CPU要访问内存时，由段寄存器提供内存单元的段地址。</li><li>CS存放指令的段地址，IP存放指令的偏移地址。<br>8086机种，任意时刻，CPU将CS:IP指向的内容当作指令执行。</li><li>8086CPU的工作过程：<ol><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li><li>IP指向下一条指令；</li><li>执行指令。（转到步骤1，重复这个过程。）</li></ol></li><li>8086CPU提供转移指令修改CS、IP的内容</li></ol></blockquote><h3 id="实验1-查看CPU和内存，用机器指令和汇编指令编程"><a href="#实验1-查看CPU和内存，用机器指令和汇编指令编程" class="headerlink" title="实验1 查看CPU和内存，用机器指令和汇编指令编程"></a>实验1 查看CPU和内存，用机器指令和汇编指令编程</h3><h4 id="1-预备知识：Debug的使用"><a href="#1-预备知识：Debug的使用" class="headerlink" title="1. 预备知识：Debug的使用"></a>1. 预备知识：Debug的使用</h4><p>我们以后所有的实验中，都将用到Debug程序，首先学习一下它的主要用法。</p><h5 id="（1）什么是Debug？"><a href="#（1）什么是Debug？" class="headerlink" title="（1）什么是Debug？"></a>（1）什么是Debug？</h5><p>Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具。<br>使用它，可以查看CPU各种寄存器的内容、内存的情况和在机器码级追踪程序的运行。</p><h5 id="（2）我们用到的Debug功能。"><a href="#（2）我们用到的Debug功能。" class="headerlink" title="（2）我们用到的Debug功能。"></a>（2）我们用到的Debug功能。</h5><ul><li>用Debug的R命令查看、改变CPU寄存器的内容；</li><li>用Debug的D命令查看内存中的内容；</li><li>用Debug的E命令改写内存中的内容；</li><li>用Debug的U命令将内存中的机器指令翻译成汇编指令；</li><li>用Debug的T命令执行一条机器指令；</li><li>用Debug的A命令以汇编语言的格式在内存中写入一条机器指令。</li></ul><p>Debug的命令比较多，共有20多个，但这6个命令是和汇编学习密切相关的。<br>在以后的实验中，我们还会用到一个P命令。</p><h5 id="（3）进入Debug"><a href="#（3）进入Debug" class="headerlink" title="（3）进入Debug"></a>（3）进入Debug</h5><p>Debug是在DOS方式下使用的程序。我们在进入Debug前，应先进入到DOS方式。<br>用以下方式可以进入DOS。</p><ol><li>重新启动计算机，进入DOS方式，此时进入的是实模式的DOS。</li><li>在Windows中进入DOS的方式，此时进入的是虚拟8086模式的DOS。</li></ol><blockquote><p>注：以上两种方法我都试过了，用不了，大概是书的年代有点久远。</p><p>替代方案可以上网上查，我是用DOSBox ，可以说是一个模拟器</p></blockquote><h5 id="（4）用R命令查看、改变CPU寄存器的内容。"><a href="#（4）用R命令查看、改变CPU寄存器的内容。" class="headerlink" title="（4）用R命令查看、改变CPU寄存器的内容。"></a>（4）用R命令查看、改变CPU寄存器的内容。</h5><p>我们已经知道了AX、BX、CX、DX、CS、IP这6个寄存器，现在看一下它们之中的内容，<br>如下图所示。其他寄存器如SP、BP、SI、DI、DS、ES、SS、标志寄存器等我们先不予理会。</p><p><img src="https://s2.loli.net/2023/01/24/WGVQmtnpXEN6J83.png" alt="使用R命令查看CPU中各个寄存器中的内容"></p><p>注意CS和IP的值，CS=0740，IP=0100，也就是说，内存0740:0100处的指令为CPU当前要读取、执行的指令。<br>在所有的寄存器下方，Debug还列出了CS:IP所指向的内存单元处存放的机器码，并将它翻译为汇编指令。<br>可以看到，CS:IP所指向的内存单元为0740:0100，此处存放的机器码为00 00，对应的汇编指令为ADD [BX+SI],AL（这条指令的含义我们还不知道，先不探究）。</p><p>Debug输出的右下角还有一个信息：“DS:0000=CD”，我们以后会进行说明，这里同样不必探究。</p><p>还可以用R命令来改变寄存器中的内容，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/SfjrdGRCPzyAp9n.png" alt="用R命令修改寄存器AX中的内容"></p><p>若要修改一个寄存器中的值，比如AX中的值，可用R命令后加寄存器名来进行，输入“r ax”后按Enter键，将出现“：”作为输入提示，在后面输入要写入的数据后按Enter键，即完成了对AX中内容的修改。<br>若想看一下修改的结果，可再用R命令查看，如上图所示。</p><h5 id="（5）用Debug的D命令查看内存中的内容"><a href="#（5）用Debug的D命令查看内存中的内容" class="headerlink" title="（5）用Debug的D命令查看内存中的内容"></a>（5）用Debug的D命令查看内存中的内容</h5><p>用Debug的D命令，可以查看内存中的内容，D命令的格式较多，这里只介绍在本次实验中用到的格式。</p><p>如果我们想知道内存10000H处的内容，可以用“d 段地址:偏移地址”的格式来查看，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/CsSu41QVxrPEGYk.png" alt="用D命令查看内存1000:0处的内容"></p><p>要查看内存10000H处的内容，首先将这个地址表示为段地址:偏移地址的格式，可以是1000:0,然后用“d 1000:0”列出1000:0处的内容。</p><p>使用“d 段地址:偏移地址”的格式，Debug将列出从指定内存单元开始的128个内存单元的内容。上图中，在使用d 1000:0后，Debug列出了1000:0~1000:7F中的内容。</p><p>使用D命令，Debug将输出3部分内容（如上图所示）</p><ol><li><p>中间是从指定地址开始的128个内存单元的内容，用十六进制的格式输出，每行的输出从16的整数倍的地址开始，最多输出16个单元的内容。<br>从图中，我们可以知道，内存1000:0单元中的内容是0，内存1000:0<del>1000:F中的内容都在第一行；<br>内存1000:10中的内容是0，内存1000:11处的内容是0，内存1000:10</del>1000:1F中的内容都在第二行。<br>注意每行的中间有一个“-”，它将每行的输出分为两部分，这样便于查看。<br>比如，要想从图中找出1000:6B单元中内容，可以从1000:60找到行，“-”前面是1000:60<del>1000:67的8个单元，后面是1000:68</del>1000:6F的8个单元，这样我们就可以从1000:68单元向后数3个单元，找到1000:6B单元，可以看到，1000:6B中的内容为0.</p></li><li><p>左边是每行的起始地址。</p></li><li><p>右边是每个内存单元中的数据对应的可显示的ASCII码字符。没有对应可显示的ASCII字符，Debug就用“.”来代替。</p><p>注意，我们看到的内存中的内容，在不同的计算机中是不一样的，也可能每次用Debug看到的内容都不相同，因为我们用Debug看到的都是原来就在内存中的 内容，这些内容受随时都有可能变化的系统环境的影响。<br>当然，我们也可以改变内存、寄存器中的内容。</p><p>我们使用d 1000:9查看1000:9处的内容，Debug将怎样输出呢？如下图所示.</p><p><img src="https://s2.loli.net/2023/01/24/78Rf9gam2yHQKcV.png" alt="查看1000:9处的内容"></p></li></ol><p>Debug从1000:9开始显示，一直到1000:88，一共是128个字节。<br>第一行中的1000:0~1000:8单元中的内容不显示。</p><p>在一进入Debug后，用D命令直接查看，将列出Debug预设的地址处的内容，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/m8ZfNtCMLicF2BH.png" alt="列出Debug预设的地址处的内容"></p><p>在使用“d 段地址:偏移地址”之后，接着使用D命令，可列出后续内容，如下图所示</p><p><img src="https://s2.loli.net/2023/01/24/SnYb4y1jTuxlBaf.png" alt="列出后续的内容"></p><p>也可以指定D命令的查看范围，此时采用“d 段地址:起始偏移地址 结尾偏移地址”的格式。<br>比如要看1000:0~1000:9的内容，可以用“d 1000:0 9”实现，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/dNqxjD2HYnJGBOa.png" alt="查看1000:0~1000:9单元中的内容"></p><p>如果我们就想查看内存单元10000H中的内容， 可以用下图中的任何一种方法看到，因为图中的所有“段地址:偏移地址”都表示了10000H这一物理地址。</p><p><img src="C:\Users\gu\AppData\Roaming\Typora\typora-user-images\image-20230124172929935.png" alt="用3种不同的段地址和偏移地址查看同一个物理地址中的内容"></p><h5 id="（6-用Debug中的E命令改写内存中的内容。"><a href="#（6-用Debug中的E命令改写内存中的内容。" class="headerlink" title="（6) 用Debug中的E命令改写内存中的内容。"></a>（6) 用Debug中的E命令改写内存中的内容。</h5><p>可以使用E命令来改写内存中的内容，比如，要将内存1000:0~1000:9单元中的内容分别写成0、1、2、3、4、5、6、7、8、9，可以用“e 起始地址 数据 数据 数据 ……” 的格式来进行，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/zK3Ow1iuAsILQnc.png" alt="用E命令修改从1000:0开始的10个单元的内容"></p><p>上图中，先用D命令查看1000:0<del>1000:f单元的内容，再用E命令修改从1000:0开始的10个单元的内容，最后用D命令查看1000:0</del>1000:f中内容的变化。</p><p>也可以采用提问的方式来一个一个地改写内存中的内容，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/ehIOYfPswADSX8o.png" alt="用E命令修改从1000:10开始的4个单元的内容"></p><p>如上图中，可以用E命令以提问的方式来逐个地修改从某一地址开始的内存单元中的内容，以从1000:10单元为例，步骤如下。</p><ol><li>输入e 1000:10，按Enter键</li><li>Debug显示起始地址1000:0010，和第一单元（即1000:0010单元）的原始内容：6D，然后光标停在“.”的后面提示输入想要写入的数据，此时可以有两个选择：其一为输入数据（我们输入的是0），然后按空格键，即用输入的数据改写当前的内存单元；其二为不输入数据，直接按空格键，则不对当前内存单元进行改写。</li><li>当前内存单元处理完成后（无论是改写或没有改写，只要按了空格键，就表示处理完成），Debug将接着显示下一个内存单元的原始内容，并提示进行修改，读者可以用同样的方法处理。</li><li>所有希望改写的内存单元改写完毕后，按Enter键，E命令操作结束。</li></ol><p>可以用E命令向内存中写入字符，比如，用E命令从内存1000:0开始写入数值1、字符“a”、数值2、字符“b”、数值3、字符“c”，可采用下图中所示的方法进行。</p><p><img src="https://s2.loli.net/2023/01/24/Dm7lqZ9hvwz6eJU.png" alt="用E命令向内存中写入字符"></p><p>从上图中可以看出，Debug对E命令的执行结果，向1000:0、1000:2、1000:4单元中写入数值1、2、3，向1000:1、1000:3、1000:5单元中写入字符“a”、“b”、“c”的ASCII码值：61H、62H、63H。</p><p>也可以用E命令向内存中写入字符串，比如，用E命令从内存1000:0开始写入：数值1、字符串“a+b”、数值2、字符串“c++”、字符3、字符串“IBM”，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/ZlAjYJ9ErDGmtV1.png" alt="用E命令向内存中写入字符串"></p><h5 id="（7）用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码。"><a href="#（7）用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码。" class="headerlink" title="（7）用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码。"></a>（7）用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码。</h5><p>如何向内存中存入机器码呢？<br>我们知道，机器码也是数据，当然可以用E命令将机器码写入内存。<br>比如我们要从内存1000:0单元开始写入这样一段机器码：</p><table><thead><tr><th>机器码</th><th>对应的汇编指令</th></tr></thead><tbody><tr><td>b80100</td><td>mov ax,0001</td></tr><tr><td>b90200</td><td>mov cx,0002</td></tr><tr><td>01c8</td><td>add ax,cx</td></tr></tbody></table><p>可用如下图中所示的方法进行。</p><p><img src="https://s2.loli.net/2023/01/24/hiXEaUJmkfyjZcC.png" alt="用E命令将机器码写入内存"></p><p>如何查看写入的或内存中原有的机器码所对应的汇编指令呢？<br>可以使用U命令将从1000:0开始的内存单元中的内容翻译为汇编指令，并显示出来。如下图所示</p><p><img src="C:\Users\gu\AppData\Roaming\Typora\typora-user-images\image-20230124225352222.png" alt="用U命令将内存单元中的内容翻译为汇编指令显示"></p><p>上图中，首先用E命令向从1000:0开始的内存单元中写入了8个字节的机器码；<br>然后用D命令查看内存1000:0~1000:1f的数据（从数据的角度看一下写入的内容）；<br>最后用U命令查看从1000:00开始的内存单元中的机器指令和它们所对应的汇编指令。</p><p>U命令的显示输出分为3部分，每一条机器指令的地址、机器指令、机器指令所对应的汇编指令。我们可以看到：</p><p>1000:0处存放的是写入的机器码b8 01 00所组成的机器指令，对应的汇编指令是mov ax.1;<br>1000:3处存放的是写入的机器码b9 02 00所组成的机器指令；对应的汇编指令是mov cx,2;<br>1000:6处存放的是写入的机器码01 c8所组成的机器指令；对应的汇编指令是add ax,cx;<br>1000:8处存放的是内存中机器码0所组成的机器指令；对应的汇编指令是add [bx+si],al</p><p>由此，我们可以再一次看到内存中的数据和代码没有任何区别，关键在于如何解释。</p><p>如何执行我们写入的机器指令呢？<br>使用Debug的T命令可以执行一条或多条指令，<br>简单地使用T命令，可以执行CS:IP指向的指令，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/FtkOPGhJHRfxTZ1.png" alt="使用T命令执行CS:IP指向的指令"></p><p>上图中，首先用E命令向从1000:0开始的内存单元中写入8个字节的机器码；<br>然后用 R命令查看CPU中寄存器的状态，可以看到，CS=0740、IP=0100，指向内存0740:0100；<br>若要用T命令控制CPU执行我们写到1000:0的指令，必须先让CS:IP指向1000:0；<br>接着用R命令修改CS、IP中的内容，使CS:IP指向1000:0.</p><p>完成上面的步骤后，就可以使用T命令来执行我们写入的指令了（此时，CS:IP指向我们的指令所在的内存单元）。<br>执行T命令后，CPU执行CS:IP指向的指令，则1000:0处的指令b8 01 00(mov ax,0001)得到执行，指令执行后，Debug显示输出CPU中寄存器的状态。</p><p>注意，指令执行后，AX中的内容被改写为1，IP改变为IP+3（因为mov ax,0001的指令长度为3个字节），CS:IP指向下一条指令。</p><p>接着上图，我们可以继续使用T命令执行下面的指令，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/i9utzWqFaO2vVJ6.png" alt="用T命令继续执行"></p><p>在上图中，用T命令继续执行后面的指令，注意每条指令执行后，CPU相关寄存器内容的变化。</p><h5 id="（8）用Debug的A命令以汇编指令的形式在内存中写入机器指令。"><a href="#（8）用Debug的A命令以汇编指令的形式在内存中写入机器指令。" class="headerlink" title="（8）用Debug的A命令以汇编指令的形式在内存中写入机器指令。"></a>（8）用Debug的A命令以汇编指令的形式在内存中写入机器指令。</h5><p>前面我们使用E命令写入机器指令，这样做很不方便，最好能直接以汇编指令的形式写入指令。<br>为此，Debug提供了A命令。<br>A命令的使用方法如下图所示。</p><p><img src="https://s2.loli.net/2023/01/24/5plaXKQTRHj6AEv.png" alt="用A命令向从1000:0开始的内存单元中写入指令"></p><p>上图中，首先用A命令，以汇编语言向从1000:0开始的内存单元中写入了几条指令，<br>然后用D命令查看A命令的执行结果。<br>可以看到，在使用A命令写入指令时，我们输入的是汇编指令，Debug将这些汇编指令翻译为对应的机器指令，将它们的机器码写入内存。</p><p>使用A命令写入汇编指令时，在给出的起始地址后直接按Enter键表示操作结束。</p><p>如下图中，简单地使用A命令，从一个预设的地址开始输入指令</p><p><img src="https://s2.loli.net/2023/01/24/XMEcDrg1HzQm4tW.png" alt="从一个预设的地址开始输入指令"></p><blockquote><p>本次实验中需要用到的命令</p><p>查看、修改CPU中寄存器的内容：R命令</p><p>查看内存中的内容：D命令</p><p>修改内存中的内容：E命令（可以写入数据、指令，在内存中，它们实际上没有区别）</p><p>将内存中的内容解释为机器指令和对应的汇编指令：U命令</p><p>执行CS:IP指向的内存单元处的指令：T命令</p><p>以汇编指令的形式向内存中写入指令：A命令</p><p>在预备知识中，详细讲解了Debug的基本功能和用法。<br>在汇编语言的学习中，Debug是一个经常用到的工具，在学习预备知识中，应该一边看书一边在机器上操作。</p><p>前面提到，我们的原则是：以后用到的，以后再说。<br>所以在这里只讲了一些在本次实验中需要用到的命令的相关的使用方法。<br>以后根据需要，我们会讲解其他的用法。</p></blockquote><h2 id="第3章-寄存器（内存访问）"><a href="#第3章-寄存器（内存访问）" class="headerlink" title="第3章 寄存器（内存访问）"></a>第3章 寄存器（内存访问）</h2><p>第2章中，我们主要从CPU如何执行指令的角度讲解了89086CPU的逻辑结构、形成物理地址的方法、相关的寄存器以及一些指令。<br>读者应在通过了前一章所有的检测点，并完成了实验任务之后，再开始学习当前的课程。<br>这一章中，我们从访问内存的角度继续学习几个寄存器。</p><h4 id="3-1-内存中字的存储"><a href="#3-1-内存中字的存储" class="headerlink" title="3.1 内存中字的存储"></a>3.1 内存中字的存储</h4><p>CPU中，用16位寄存器来存储一个字。<br>高8位存放高位字节，低8位存放低位字节。<br>在内存中存储时，由于内存单元是字节单元（一个单元存放一个字节），则一个字要用两个地址连续的内存单元来存放，<br>这个字的低位字节存放在低地址单元中，高位字节存放在高地址单元中。</p><p>我们用0、1两个内存单元存放数据20000（4E20H）。<br>0、1两个内存单元用来存储一个字，这两个单元可以看作一个起始地址为0的字单元（存放一个字的内存单元，由0、1两个字节单元组成）。<br>对于这个字单元来说，0号单元是低地址单元，1号单元是高地址单元，则字型数据4E20H的低位字节存放在0号单元中，高位字节存放在1号单元中。<br>同理，将2、3号单元看作一个字单元，它的起始地址为2。<br>在这个字单元中存放数据18（0012H），则在2号单元中存放低位字节12H，在3号单元中存放高位字节00H。</p><p>我们提出字单元的概念：<br>字单元，即存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成。|<br>高地址内存单元中存放字型数据的高位字节，低地址内存单元中存放字型数据的低位字节。</p><p>在以后的课程中，我们将起始地址为N的字单元简称为N地址字单元。<br>比如一个字单元由2、3、两个内存单元组成，则这个字单元的起始地址为2，我们可以说这是2地址字单元。</p><h4 id="3-2-DS和-address"><a href="#3-2-DS和-address" class="headerlink" title="3.2 DS和[address]"></a>3.2 DS和[address]</h4><p>CPU要读写一个内存单元的时候，必须先给出这个内存单元的地址，在8086PC中，内存地址由段地址和偏移地址组成。<br>8086CPU中有一个DS寄存器，通常用来存放要访问数据的段地址。<br>比如我们要读取10000H单元的内容，可以用如下的程序段进行。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov bx,1000Hmov ds,bxmov al,[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的三条指令将10000H(1000:0)中的数据读到al中。</p><p>下面详细说明指令的含义。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov al,[0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面我们使用mov指令，可完成两种传送：</p><ol><li>将数据直接送入寄存器；</li><li>将一个寄存器中的内容送入另一个寄存器。</li></ol><p>也可以使用mov指令将一个内存单元中的内容送入一个寄存器中。<br>从哪一个内存单元送到哪一个寄存器中？<br>在指令中必须指明。<br>寄存器用寄存器名来指明，内存单元则需用内存单元的地址来指明。<br>显然，此时mov指令的格式应该是：mov 寄存器名，内存单元地址。</p><p>“[…]”表示一个内存单元，“[…]”中的0表示内存单元的偏移地址。<br>我们知道，只有偏移地址是不能定位一个内存单元的，那么内存单元的段地址是多少呢？<br>指令执行时，8086CPU自动取ds中的数据为内存单元的段地址。</p><p>再来看一下，如何用mov指令从10000H中读取数据。<br>10000H用段地址和偏移地址表示为1000:0，我们先将段地址1000H放入ds，然后用mov al,[0]完成传送。<br>mov指令中的[]说明操作对象是一个内存单元，[]中的0说明这个内存单元的偏移地址是0，它的段地址默认放在ds中，指令执行时，8086CPU会自动从ds中取出。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov bx,1000Hmov ds,bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若要用mov al,[0]完成数据从1000:0单元到al的传送，这条指令执行时，ds中的内容应为段地址1000H，所以在这条指令之前应该将1000H送入ds。</p><p>如何把一个数据送入寄存器呢？<br>我们以前用类似“mov ax,1”这样的指令来完成，从理论上讲，我们可以用相似的方式：mov ds,1000H，来将1000H送入ds。<br>可是， 现实并非如此，8086CPU不支持将数据直接送入段寄存器的操作，ds是一个段寄存器，所以mov ds,1000H这条指令是非法的。<br>那么如何将1000H送入ds呢？<br>只好用一个寄存器来进行中转，即先将1000H送入一个一般的寄存器，如bx，再将bx中的内容送入ds。</p><p>为什么8086CPU不支持将数据直接送入段寄存器的操作？<br>这属于8086CPU硬件设计的问题，我们只要知道这一点就行了。</p><h4 id="3-3-字的传送"><a href="#3-3-字的传送" class="headerlink" title="3.3 字的传送"></a>3.3 字的传送</h4><p>前面我们用mov指令在寄存器和内存之间进行字节型数据的传送。<br>因为8086CPU是16位结构，有16根数据线，所以，可以一次性传送16位的数据，也就是说可以一次性传送一个字。<br>只要在mov指令中给出16位的寄存器就可以进行16位数据的传送了。<br>比如：c</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov bx,1000Hmox ds,bxmov ax,[0];1000:0处的字型数据送到axmov [0],cx;cx中的16位数据送到1000:0处<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-mov、add、sub指令"><a href="#3-4-mov、add、sub指令" class="headerlink" title="3.4 mov、add、sub指令"></a>3.4 mov、add、sub指令</h4><p>前面我们用到了mov、add、sub指令，它们都带有两个操作对象。</p><p>到现在，我们知道，mov指令可以有以下几种形式。</p><p>mov 寄存器，数据比如：mov ax,8<br>mov 寄存器，寄存器比如：mov ax,bx<br>mov 寄存器，内存单元比如：mov ax,[0]<br>mov 内存单元，寄存器比如：mov [0],ax<br>mov 段寄存器，寄存器比如：mov ds,ax</p><p>我们可以根据这些已知指令进行下面的推测。</p><ol><li><p>既然有“mov 段寄存器，寄存器”，从寄存器向段寄存器传送数据，那么也应该有“mov 寄存器，段寄存器”，从段寄存器向寄存器传送数据。<br>一个合理的设想是：80986CPU内部有寄存器到段寄存器的通路，那么也应该有相反的道路。</p><p>有了推测，我们还要验证一下。进入Debug，用A命令，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/25/wcGhIkUxosTRpKg.png" alt="试验mov ax,ds"></p></li></ol><p>上图中，用A命令在一个预设的地址0740:0100处，用汇编的形式mov ax,ds写入指令，再用T命令执行，可以看到执行的结果，段寄存器ds中的值送到了寄存器ax中。<br>通过验证我们知道，“mov 寄存器，段寄存器”是正确的指令。</p><ol start="2"><li><p>既然有“mov 内存单元，寄存器”，从寄存器向内存单元传送数据，那么也应该有“mov 内存单元，段寄存器”，从段寄存器向内存单元传送数据。<br>比如我们可以将段寄存器cs中的内容送入内存10000H处，指令如下。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov ax,1000Hmov ds,axmov [0],cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在Debug中进行试验，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/25/MCjZnKoIdScJm2G.png"></p></li></ol><p><img src="https://s2.loli.net/2023/01/25/BWIoU6M4CFXYPTL.png" alt="试验mov [0],cs"></p><p>上图中，当CS:IP指向0740:0105的时候，Debug显示当前的指令mov [0000],cs，因为这是一条访问内存的指令，Debug还显示出指令要访问的内存单元中的内容。<br>由于指令中的CS是一个16位寄存器，所以要访问（写入）的内存单元是一个字单元，它的偏移地址为0，段地址在ds中，Debug在屏幕右边显示出“DS:0000=0000”，我们可以知道这个字单元中的内容为0、</p><p>mov [0000],cs执行后，CS中的数据（0740H）被写入1000:0处，1000:1单元存放07H，1000:00单元存放40H。</p><p>最后，用D命令从1000:0开始查看指令执行后 内存中的情况，注意1000:0、1000:1两个单元的内容。</p><ol start="3"><li><p>“mov 段寄存器，内存单元”也应该可行，比如我们可以用10000H处存放的字型数据设置ds（即将10000H处存放的字型数据送入ds），指令如下。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov ax,1000Hmov ds,axmov ds,[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以自行在Debug中进行试验。</p><p>add和sub指令同mov一样，都有两个操作对象。它们也可以有以下几种形式。</p><p>add 寄存器，数据比如：add ax,8<br>add 寄存器，寄存器比如：add ax,bx<br>add 寄存器，内存单元比如：add ax,[0]<br>add 内存单元，寄存器比如：add [0],ax<br>sub 寄存器，数据比如：sub ax,9<br>sub 寄存器，寄存器比如：sub ax,bx<br>sub 寄存器，内存单元比如：sub ax,[0]<br>sub 内存单元，寄存器比如：sub [0],ax</p></li></ol><h4 id="3-5-数据段"><a href="#3-5-数据段" class="headerlink" title="3.5 数据段"></a>3.5 数据段</h4><p>前面讲过，对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。<br>我们可以将一组内存长度为N（N≤64KB）、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段。<br>比如用123B0H<del>123B9H这段内存空间来存放数据，我们就可以人物，123B0H</del>123B9H这段内存是一个数据段，它的段地址为123BH，长度为10个字节。</p><p>如何访问数据段中的数据呢？将一端内存当作数据段，是我们在编程时的一种安排，可以在具体操作的时候，用ds存放数据段的段地址，再根据需要，用相关指令访问数据段中的具体单元。</p><p>比如，将123B0H~123B9H的内存单元定义为数据段。<br>现在要累加这个数据段中的前3个单元中的数据，代码如下。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov ax,123BHmov ds,ax;将123BH送入ds中，作为数据段的段地址mov al,0;用al存放累加结果add al,[0];将数据段第一个单元（偏移地址为0）中的数值加到al中add al,[1];将数据段第二个单元（偏移地址为1）中的数值加到al中add al,[2];将数据段第三个单元（偏移地址为2）中的数值加到al中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3.1~3.5 小结</p><ol><li>字在内存中存储时，要用两个地址连续的内存单元来存放，字的低位字节存放在低地址单元中，高位字节存放在高地址单元中。</li><li>用mov指令访问内存单元，可以在mov指令中只给出单元的偏移地址自，此时，段地址默认在DS寄存器中。</li><li>[address]表示一个偏移地址为address的内存单元。</li><li>在内存和寄存器之间传送字型数据，高地址单元和高8位寄存器、低地址单元和低8位寄存器相对应。</li><li>mov、add、sub是具有两个操作对象的指令。jmp是具有一个操作对象的指令。</li><li>可以根据自己的推测，在Debug中实验指令的新格式。</li></ol></blockquote><h4 id="3-6-栈"><a href="#3-6-栈" class="headerlink" title="3.6 栈"></a>3.6 栈</h4><p>在这里，我们对栈的研究仅限于这个角度：栈是一种具有特殊的访问方式的存储空间。<br>它的特殊性在于，最后进入这个空间的数据，最先出去。</p><p><img src="https://s2.loli.net/2023/01/26/tGlmiOa67CBR29p.png" alt="入栈的方式"></p><p>现在的问题是，一次只允许取一本，我们如何将3本书从盒子中取出来？</p><p>显然，必须从盒子的最上边取。<br>这样取出的顺序就是：《软件工程》、《C语言》、《高等数学》，和放入的顺序相反，如下图所示。</p><p><img src="https://s2.loli.net/2023/01/26/mc5lSzu6gkUKINe.png" alt="出栈的方式"></p><p>从程序化的角度来讲，应该有一个标记，这个标记一直指示着盒子最上边的书。</p><p>如果说，上例中的盒子就是一个栈，我们可以看出，栈有两个基本的操作：入栈和出栈。<br>入栈就是将一个新的元素放到栈顶，出栈就是从栈顶取出一个元素。<br>栈顶的元素总是最后入栈，需要出栈，又最先被从栈中取出。<br>栈的这种操作规则被称为：LIFO（Last In First Out，后进先出）。</p><h4 id="3-7-CPU提供的栈机制"><a href="#3-7-CPU提供的栈机制" class="headerlink" title="3.7 CPU提供的栈机制"></a>3.7 CPU提供的栈机制</h4><p>现今的CPU中都有栈的设计就，8086CPU也不例外。<br>8086CPU提供相关的指令来以栈的方式访问内存空间。<br>这意味着，在基于8086CPU编程的时候，可以将一端内存当作栈来使用。</p><p>8086CPU提供入栈和出栈指令，最基本的两个是PUSH（入栈）和POP（出栈）。<br>比如，push ax表示将寄存器ax中的数据送入栈中，pop ax表示从栈顶取出数据送入ax。<br>8086CPU的入栈和出栈操作都是以字为单位进行的。</p><p>下面距离说明，我们可以将10000H~1000FH这段内存当作栈来使用。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov ax,0123Hpush axmov bx,2266Hpush bxmov cx,1122Hpush cxpop axpop bxpop cx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，字型数据用两个单元存放，高地址单元存放高8位，低地址单元存放低8位。</p><p>一些问题：</p><p>其一，我们10000H<del>1000FH这段内存当作栈来使用，CPU执行push和pop指令时，将对这段空间按照栈的后进先出的规则进行访问。<br>但是，一个重要的问题是，CPU如何知道10000H</del>1000FH这段空间被当作栈来使用？</p><p>其二，push ax等入栈指令执行时，要将寄存器中的内容放入当前栈顶单元的上方，成为新的栈顶元素；pop ax等指令执行时，要从栈顶单元中取出数据，送入寄存器中。<br>显然，push、pop在执行的时候，必须知道哪个单元是栈顶单元，可是，如何知道呢？</p><p>这不禁让我们想起另外一个讨论过的问题，就是，CPU如何知道当前要执行的指令所在的位置？<br>我们现在知道答案，那就是CS、IP中存放着当前指令的段地址和偏移地址。<br>现在的问题是：CPU如何知道栈顶的位置？<br>显然，也应该有相应的寄存器来存放栈顶的地址，8086CPU中，有两个寄存器，段寄存器SS和寄存器SP，栈顶的段地址存放在SS中，偏移地址存放在SP。<br><strong>任意时刻，SP:SP指向栈顶元素</strong>。push指令和pop指令执行时，CPU从SS和SP中得到栈顶的地址。</p><p>现在，我们可以完整地描述push和pop指令的功能了，例如push ax。</p><p>push ax的执行，由以下两步完成。</p><ol><li>SP=SP-2，SS:SP指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶；</li><li>将ax中的内容送入SS:SP指向的内存单元处，SS:SP此时指向新栈顶。</li></ol><p>pop ax的执行过程和push ax刚好相反，由以下两步完成。</p><ol><li>将SS:SP指向的内存单元处的数据送入ax中；</li><li>SP=SP+2，SS:SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li></ol><h4 id="3-8-栈顶超界的问题"><a href="#3-8-栈顶超界的问题" class="headerlink" title="3.8 栈顶超界的问题"></a>3.8 栈顶超界的问题</h4><p>我们现在知道，8086CPU用SS和SP指示栈顶的地址，并提供push和pop指令实现入栈和出栈。</p><p>但是，还有一个问题需要讨论，就是SS和SP只是记录了栈顶的地址，依靠SS和SP可以保证在入栈和出栈时找到栈项。<br>可是，如何能够保证在入栈、出栈时，栈顶不会超出栈空间？</p><p>当栈满的时候再使用push指令入栈，或栈空的时候再使用pop指令出栈，都将发生栈顶超界问题。</p><p>栈顶超界是危险的，因为我们依然将一段空间安排为栈，那么在栈空间之外的空间里很可能存放了具有其他用途的数据、代码等，这些数据、代码可能是我们自己程序中的，也可能是别的程序中的（毕竟一个计算机系统中并不是只有我们自己的程序在运行）。但是由于我们在入栈出栈时的不小心，而将这些数据、代码以外的改写，将会引发一连串的错误。</p><p>我们当然希望CPU可以帮我们解决这个问题，比如说在CPU中有记录栈顶上限和栈底的寄存器，我们可以通过填写这些寄存器来指定栈空间的范围，然后，CPU在执行push指令的时候靠检测栈顶上限寄存器、在执行pop指令的时候靠检测栈底寄存器保证不会超界。</p><p>不过，对于8086CPU，这只是我们的一个设想（我们当然可以这样设想，如果CPU是我们设计的话，这也就不仅仅是一个设想）。实际的情况是，8086CPU并没有这样的寄存区，</p><p>8086CPU不保证我们对栈的操作不会超界。<br>这也就是说，8086CPU只知道栈顶在何处（由SS:SP指示），而不知道我们安排的栈空间有多大。<br>这点就好像CPU只知道当前要执行的指令在何处（由CS:IP指示），而不知道要执行的指令有多少。<br>从这两点上我们可以看出8086CPU的工作机理，它只考虑当前的情况：<br>当前的栈顶在何处、当前要执行的指令是哪一条。</p><p>我们在编程的时候要自己操心栈顶超界的问题，要根据可能用到的最大栈空间，来安排栈的大小，防止入栈的数据太多而导致的超界；执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的超界。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《自学大全》（已弃坑）</title>
      <link href="/2022/12/19/zi-xue-da-quan-du-shu-bi-ji/"/>
      <url>/2022/12/19/zi-xue-da-quan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在网上看到这本书，有些好奇，便买下来了</p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="2022-12-19-16-11"><a href="#2022-12-19-16-11" class="headerlink" title="2022-12-19 16:11"></a>2022-12-19 16:11</h3><ul><li>用活动课的时间发了这篇文章，简单介绍缘由</li></ul><h3 id="2023-1-19-12-43"><a href="#2023-1-19-12-43" class="headerlink" title="2023-1-19 12:43"></a>2023-1-19 12:43</h3><ul><li>正式弃坑，因为这本书实在没有做笔记的必要</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>书的样子如下，但愿它能给我带来改变 :)</p><p><img src="https://s2.loli.net/2022/12/19/ZBsetCwbOy7kuhS.jpg" alt="自学大全"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-主题色更改及字体更换</title>
      <link href="/2022/12/17/zhu-ti-se-geng-gai-ji-zi-ti-geng-huan/"/>
      <url>/2022/12/17/zhu-ti-se-geng-gai-ji-zi-ti-geng-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>matery自带的红绿配色实在是有点辣眼，于是就改了一下，顺带换了个字体</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1622400">Matery主题自定义字体 - 腾讯云开发者社区-腾讯云 (tencent.com)</a><br><a href="https://blog.csdn.net/weixin_46399753/article/details/104768713">hexo中matery主题的个性化定制_Love——金哥哥的博客-CSDN博客_hexomatery</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/10/02/ce-shi/"/>
      <url>/2022/10/02/ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="只是一个测试"><a href="#只是一个测试" class="headerlink" title="只是一个测试"></a>只是一个测试</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-踩坑记录</title>
      <link href="/2022/10/02/cai-keng-ji-lu/"/>
      <url>/2022/10/02/cai-keng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>评论系统弄好之后，本来想按照<a href="https://github.com/DesertsP/Valine-Admin">DesertsP/Valine-Admin: 🔥A simple comment system based on LeanCloud and Valine.</a>弄一个评论的邮件提醒。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>结果弄到最后关键一步卡住了<br><img src="https://s2.loli.net/2022/10/02/dyHjhVugLs4cTtZ.png" alt="如图所示"></p><p>这个网站的域名实际上不属于我，如果要拥有自己的域名要花钱买，还要持续付费，买服务器等等，更不用说备案了，总之非常麻烦。</p><p>结果弄了很久，最后只能放弃。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>真想拥有自己的域名、服务器。估计要等到经济独立才行了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-关于博客宠物</title>
      <link href="/2022/10/02/guan-yu-bo-ke-chong-wu/"/>
      <url>/2022/10/02/guan-yu-bo-ke-chong-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>可以参考以下几篇文章<br><a href="https://zhuanlan.zhihu.com/p/350654582">Hexo-如何养一只博客宠物</a><br><a href="https://blog.csdn.net/qq_43020645/article/details/82794092">hexo 增添宠物</a></p><p>我只是个搬运工(#｀-_ゝ-)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-主题更换以及功能完善</title>
      <link href="/2022/10/01/bo-ke-ri-zhi-zhu-ti-geng-huan/"/>
      <url>/2022/10/01/bo-ke-ri-zhi-zhu-ti-geng-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>锵锵！现在网站完全变了一副模样😎<br>如果你也想零成本拥有属于自己的网站，可以参考这篇文章，<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本文主要是讲主题更换，具体可参考这篇文章，<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery，一个基于材料设计和响应式设计而成的全面、美观的Hexo主题</a>。<br>这是主题的官方文档，里面具体讲了如何安装主题并对其进行自定义。由于我已经折腾过一次，所以在安装及自定义上没有太大问题。<br>如果你在途中遇到了各种各样的问题，就百度吧，尽可能准确的描述自己的问题，并在海量的搜索结果中筛选可能有用的信息并进行尝试，倘若有错误代码，直接复制粘贴到搜索栏或许能更快地得到你想要的答案，在不断的试错中积累经验，在成功之后享受折腾的乐趣。</p><p>现在博客已经有了比较完整的功能，评论，文章分类、搜索、个人主页等等。</p><h2 id="插眼"><a href="#插眼" class="headerlink" title="插眼"></a>插眼</h2><h3 id="取消背景色："><a href="#取消背景色：" class="headerlink" title="取消背景色："></a>取消背景色：</h3><p>在theme主题目录下，找到<code>matery.css</code>文件,<code>ctrl+F</code>快捷键查找<code>.bg-cover:after</code>，注释掉即可。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* .bg-cover:after {    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>选自<a href="https://zhuanlan.zhihu.com/p/259728821">hexo-matery主题美化(四) - 知乎 (zhihu.com)</a></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p><a href="https://valine.js.org/quickstart.html">快速开始 | Valine 一款快速、简洁且高效的无后端评论系统。</a><br>关于valine的一些自定义设置：<a href="https://blog.chrelyonly.cn/2022/02/20/7/">valine评论修改方案 </a><br>一开始像按照教程修改，发现valine版本太低<del>（而我连更新都不会）</del>，找了好久，翻了官方文档，又到别人的博客翻了很长时间，终于找到了，[为使用matery主题的hexo增加Valine评论系统](<a href="https://blog.csdn.net/slow_sparrow/article/details/117753100#:~:text=%E6%89%93%E5%BC%80">https://blog.csdn.net/slow_sparrow/article/details/117753100#:~:text=打开</a> themes[%26ma%26]terylayout_partial 中找到 valine.ejs,，找到其中的 new Valine ，大概在249行，修改为以下内容：)<br><a href="https://unpkg.com/valine@1.5.1/dist/Valine.min.js">https://unpkg.com/valine@1.5.1/dist/Valine.min.js</a><br><a href="https://blog.csdn.net/cungudafa/article/details/105548858?ops_request_misc=%7B%22request_id%22:%22166468882316782417098800%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=166468882316782417098800&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-3-105548858-null-null.article_score_rank_blog&amp;utm_term=valine&amp;spm=1018.2226.3001.4450">Valine-1.4.4新版本尝鲜+个性制定（表情包、qq头像、UI样式）</a><br><a href="https://blog.csdn.net/cungudafa/article/details/106218905?ops_request_misc=%7B%22request_id%22:%22166468882316782417098800%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=166468882316782417098800&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106218905-null-null.article_score_rank_blog&amp;utm_term=valine&amp;spm=1018.2226.3001.4450">valine评论适配（最新版表情包接口，修改样式）</a><br><a href="https://lovelijunyi.gitee.io/posts/e52c.html">Valine评论系统详解</a><br>以上为可供参考的文章</p><h3 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h3><p><a href="https://www.tidio.com/panel/visitors">Tidio</a></p><h3 id="说说"><a href="#说说" class="headerlink" title="说说"></a>说说</h3><p><a href="https://yezhechenyang.gitee.io/2020/100614065.html">【Hexo】matery添加Artitalk说说</a><br>这个之前没折腾过，弄了好长时间，前前后后花了将近5个小时，找各种解决办法，总算成功了！😃（不过好像翻墙才能看）<br>记录一下关键问题的解决办法<br><a href="https://artitalk.js.org/demo.html">Artitalk.js</a><br><a href="https://www.shifeiti.com/blog/2022-08-23/">BBtalk 发表失败 403 的解决方案 - 是非题 (shifeiti.com)</a></p><h3 id="遇到的一个问题"><a href="#遇到的一个问题" class="headerlink" title="遇到的一个问题"></a>遇到的一个问题</h3><p><a href="https://blog.csdn.net/u012757419/article/details/105614028">git提示“warning: LF will be replaced by CRLF”的解决办法</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>虽然是第二次了，但仍然遇到很多新问题😣</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-重新开始</title>
      <link href="/2022/10/01/chong-xin-kai-shi/"/>
      <url>/2022/10/01/chong-xin-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在（2022-10-01）这个网站变得十分简陋，只剩一个模板，其他文章以及主题都没有了。</p><p><img src="https://s2.loli.net/2022/10/01/n9uemfWK521HFgR.png" alt="现在（2022年10月1日）网站的样子"></p><p><img src="https://s2.loli.net/2022/10/01/mSl2Ivo4gNW5rEq.png" alt="之前的网站"><br>由于电脑重装系统后<del>（都怪自己手欠把电脑整废了）</del>，博客的本地文件被删除（上传文章需要用本地的博客文件来上传更新)，原来的网站成了空壳，我不能对其作任何修改，不能上传文章，不能更新主题，只能访问。</p><h2 id="再出发"><a href="#再出发" class="headerlink" title="再出发"></a>再出发</h2><p>于是利用某个假期，我重新在本地搭建好环境，准备从零开始再重复一遍之前的操作。<br>吸取上次的教训，我把博客本地文件放到onedrive里上传到云端，这样就能及时找回。（本来想用github，但不会弄💧）<br><img src="https://s2.loli.net/2022/10/01/tFWPB7xcq5N8lL6.png" alt="我特意为此扩容了OneDrive"></p><h3 id="那原来的网站呢？"><a href="#那原来的网站呢？" class="headerlink" title="那原来的网站呢？"></a>那原来的网站呢？</h3><p>虽然那个博客已被废弃，但上面还是有很多东西值得留下来的，我在GitHub上新建了一个分支，将旧的网页文件存进去，这样只要我想，我就可以再访问那个旧博客。（后来我试了一下，发现不行）<br><img src="https://s2.loli.net/2022/10/01/sCFRtdHOlpDVPq9.png" alt="如图"></p><p>我打算更加充分的利用这个网站，不再仅仅追求将界面弄得如何的华丽，而注重优质内容的创作。我会出一个系列专门记录这个网站的成长，一方面作为回忆过去时可以翻看的材料，另一方面一方面总结经验。此外也会发一些其他类型的文章，日常、划水之类的，以丰富网站的内容。</p><h2 id="一个简单的自我介绍"><a href="#一个简单的自我介绍" class="headerlink" title="一个简单的自我介绍"></a>一个简单的自我介绍</h2><p>本人只是一个普通的高中生，一大爱好是折腾，不过这种折腾没有什么技术含量，仅仅是流于表面，跟着教程按部就班地弄一些花里胡哨的东西，不过我乐此不疲。</p><p>由于站主水平有限，写出来的文章往往存在很多问题，可以在评论区<del>（现在甚至连评论系统都没有）</del>提出建议。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一起来见证这个网站蜕变的点点滴滴吧！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
