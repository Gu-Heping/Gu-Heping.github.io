<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>读书笔记-《汇编语言》</title>
      <link href="/2023/01/19/hui-bian-yu-yan-du-shu-bi-ji/"/>
      <url>/2023/01/19/hui-bian-yu-yan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h2><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>存储器被划分成若干个存储单元，每个存储单元从0开始顺序编号，例如一个存储器有128个存储单元，编号从<strong>0</strong>~<strong>127</strong>。<br>电子计算机的最小信息单位是bit，也就是一个二进制位。<br>8个bit组成一个Byte，也就是通常所讲的一个字节。<br>微型计算机存储器的存储单元可以存储一个Byte，即8个二进制位。<br>一个存储器有128个存储单元 ，它可以存储128个Byte。</p><p>微型存储器的容量是以字节为最小单位来计算的。对于拥有128个存储单元的存储器，我们可以说，它的容量是128个字节。</p><p>1KB=1024B   1MB=1024KB  1GB=1024MB  1TB=1024GB</p><h3 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h3><h4 id="三类信息交互"><a href="#三类信息交互" class="headerlink" title="三类信息交互"></a>三类信息交互</h4><ul><li>存储单元的地址（地址信息）</li><li>器件的选择，读或写的命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><p>总线：在计算机中专门有连接CPU和其他芯片（外部器件）的导线，通常称为总线。<br>分为三类 ：地址总线、控制总线和数据总线。</p><h3 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h3><p>CPU通过地址总线来指定存储器单元。<br>一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。</p><h3 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h3><p>CPU与内存或其他器件之间的数据传送是通过数据总线来进行的。<br>数据总线的宽度决定了CPU和外界的数据传送速度。</p><blockquote><p>8根数据总线一次可传送一个8位二进制数据（即一个字节）<br>16根数据总线一次可传送两个字节</p></blockquote><h3 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h3><p>CPU对外部器件的控制是通过控制总线来进行的。</p><blockquote><p>在这里控制总线是个总称，控制总线是一些不同控制线的集合。<br>有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。<br>所以，控制总线的宽度决定了CPU对外部器件的控制能力。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>汇编指令是机器指令的助记符，同机器指令一一对应。</p></li><li><p>每一种CPU都有自己的汇编指令集。</p></li><li><p>CPU可以直接使用的信息在存储器中存放。</p></li><li><p>在存储器中指令和数据没有任何区别，都是二进制信息。</p></li><li><p>存储单元从零开始顺序编号。</p></li><li><p>一个存储单元可以存储8个bit，即8位二进制数。</p></li><li><p>1Byte=8bit  1KB=1024B  1MB=1024KB  1GB=1024MB</p></li><li><p>每一个CPU芯片都有许多管脚，这些管脚和总线相连。也可以说，这些管脚引出总线。一个CPU可以引出3种总线的宽度标志了这个CPU不同方面的性能：</p><blockquote><p>地址总线的宽度决定了CPU的寻址能力；<br>数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量；<br>控制总线的宽度决定了CPU对系统中其他器件的控制能力。</p></blockquote></li></ol><hr><h3 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><blockquote><p>一个CPU的地址总线宽度是10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。</p></blockquote><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><p>在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连。这些器件有CPU、存储器、外围芯片组、扩展插槽等。扩展插槽上一般插有RAM内存条和各类接口卡。</p><h3 id="接口卡"><a href="#接口卡" class="headerlink" title="接口卡"></a>接口卡</h3><p>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。<br>CPU对外部设备都不能直接控制，如显示器、音箱、打印机。<br>直接控制这些设备进行工作的是插在扩展插槽上的接口卡，从而实现CPU对外设的间接控制。<br>简单地讲，就是CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作。</p><h3 id="各类存储器芯片"><a href="#各类存储器芯片" class="headerlink" title="各类存储器芯片"></a>各类存储器芯片</h3><p>一台PC机，装有多个存储器芯片，这些存储器芯片从物理连接上看是独立的、不同的器件。<br>从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM）。<br>    随机存储可读可写，但必须带电存储，关机后存储的内容丢失；<br>    只读存储器只能读取不能写入，关机后其中内容不丢失。</p><blockquote><p>这些存储器从功能和连线上又可分为以下几类：</p><ul><li><p>随机存储器<br>用于存放供CPU使用的绝大部分程序和数据，<br>主随机存储器一般由两个位置上的RAM组成，<br>装在主板上的RAM和插在扩展槽上的RAM。</p></li><li><p>装有BIOS（Basis Input/Output System, 基本输入/输出系统）的ROM<br>BIOS是由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。<br>在主板和某些接口卡上插有存储相应BIOS的ROM。<br>例如，主板上的ROM中存储着主板的BIOS（通常称为系统BIOS）；显卡上的ROM中存储着显卡的BIOS；如果网卡上装有ROM，那其中就可以存储网卡的BIOS。</p></li><li><p>接口卡上的RAM<br>某些接口卡需要对大批量输入、输出数据进行暂时存储，在其上装有RAM。<br>最典型的是显示卡上的RAM，一般称为显存。<br>显示卡随时将显存中的数据向显示器上输出。<br>换句话说，我们将需要显示的内容写入显存，就会出现在显示器上。·</p></li></ul></blockquote><h3 id="内存地址空间-1"><a href="#内存地址空间-1" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><p>上面的那些存储器，在物理上是独立的器件，但是再一下两点上相同。</p><ul><li>都和CPU的总线相连。</li><li>CPU对它们进行读或写的时候都通过控制线发出内存读写命令。</li></ul><p>这也就是说，CPU在操控它们的时候，把它们都当做内存来对待，把它们总的看作一个由若干存储单元组成的逻辑存储器，这个逻辑存储器就是我们所说的内存地址空间。<br>在汇编这门课，我们所面对的是内存地址空间</p><p>内存地址空间的大小受CPU地址总线宽度的限制。8086CPU的地址总线宽度为20，可以传送2^20个不同的地址信息（大小从0至2^20-1）。<br>即可以定位2^20个内存单元，则8086PC的内存地址空间大小为1MB。<br>同理，80386CPU的地址总线总数为32，则内存地址空间最大为4GB。</p><blockquote><p>最终运行程序的是CPU，我们用汇编语言编程的时候，必须要从CPU的角度考虑问题。<br>对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。<br>这个逻辑存储器即是我们所说的内存地址空间。</p></blockquote><hr><h2 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章 寄存器"></a>第2章 寄存器</h2><p>一个典型的CPU由运算器、控制器、寄存器（CPU工作原理）等器件构成，这些器件靠内部总线相连。<br>前一章所说的总线，相对于CPU内部来说是外部总线。<br>内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系。<br>简单地说，在CPU中：</p><ul><li>运算器进行信息处理；</li><li>寄存器进行信息存储；</li><li>控制器控制各种器件进行工作；</li><li>内部总线连接各种器件，在它们之间进行数据的传送。</li></ul><p>寄存器是CPU中程序员可以用指令读写的部件。<br>程序员通过改变各种寄存器中的内容来实现对CPU的控制。</p><p>不同的CPU，寄存器的个数、结构是不相同的。<br>8086CPU有14个寄存器，每个寄存器有一个名称。<br>这些寄存器是：AX、BX、CX 、DX 、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。</p><h3 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1 通用寄存器"></a>2.1 通用寄存器</h3><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。<br>AX、BX、CX、DX这4个寄存器通常涌来存放一般性的数据，被称为通用寄存器。</p><p>8086CPU的上一代CPU种的寄存器都是8位的，为了保证兼容，使原来基于上代CPU编写的程序稍加修改就可以运行再8086之上，8086CPU的AX、BX、CX、DX这4个寄存器都可分为两个可独立使用的8位寄存器来用：</p><ul><li>AX可分为AH和AL；</li><li>BX可分为BH和BL；</li><li>CX可分为CH和CL；</li><li>DX可分为DH和DL。</li></ul><table><thead><tr><th>寄存器</th><th>寄存器中的数据</th><th>所表示的值</th></tr></thead><tbody><tr><td>AX</td><td>100111000100000</td><td>20000(4E20H)</td></tr><tr><td>AH</td><td>01001110</td><td>78(4EH)</td></tr><tr><td>AL</td><td>00100000</td><td>32(20H)</td></tr></tbody></table><h3 id="2-2-字在寄存器中的存储"><a href="#2-2-字在寄存器中的存储" class="headerlink" title="2.2 字在寄存器中的存储"></a>2.2 字在寄存器中的存储</h3><p>出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据。</p><ul><li>字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中</li><li>字： 记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li></ul><p>一个字节可以存在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。一个字型数据20000，存在AX寄存器中，在AH中存储了它的高8位，在AL中存储了它的低8位。<br>AH和AL中的数据，既可以看成是一个字型数据的高8位和低8位，这个字型数据的大小是20000；又可以看成是两个独立的字节型数据，它们的大小分别是78和32.</p><blockquote><p>关于数制的讨论</p><p>任何数据，到了计算机中都是以二进制的形式存放的。为了描述不同的问题，又经常将它们用其他的进制来表示。比如寄存器AX中的数据是0100111000100000，这就是AX中的信息本身，可以用不同的逻辑意义来看待它。可以将它看作一个数值，大小是20000。</p><p>当然，二进制数100111000100000本身也可表示一个数值的大小，但人类习惯的是十进制，用十进制20000表示可以使我们直观地感受到这个数值的大小。</p><p>十六进制数的一位相当于二进制数的四位，如0100111000100000可表示成：4(0100)、E(1110)、2(0010)、0(0000)四位十六进制数。</p><p>一个内存单位可存放8位数据，CPU中的寄存器又可存放n个8位的数据。也就是说，计算机中的数据大多是由1~N个8位数据构成的。很多时候，需要直观地看出组成数据的各个字节数据的值，用十六进制来表示数据可以直观地看出这个数据是由哪些8位数据构成的。比如20000写成4E20就可以直观地看出，这个数据是由4E和20两个8位数据构成的，如果AX种存放4E20，则AH里是4E，AL里是20.这种表示方法便于许多问题的直观分析。在以后的课程中，我们多用十六进制来表示一个数据</p><p>在以后的课程中，为了区分不同的进制，在十六进制表示的数据的后面加H，在二进制表示的数据后面加B，十进制表示的数据后面什么也不加。如：可用3种不同的进制表示表格种AX里的数据，十进制：20000，十六进制：4E20H，二进制：0100111000100000B、</p></blockquote><h3 id="2-3-几条汇编指令"><a href="#2-3-几条汇编指令" class="headerlink" title="2.3 几条汇编指令"></a>2.3 几条汇编指令</h3><p>通过汇编指令控制CPU进行工作，看一下表中的几条指令。</p><table><thead><tr><th>汇编指令</th><th>控制CPU完成的操作</th><th>用高级语言的语法描述</th></tr></thead><tbody><tr><td>mov ax,18</td><td>将18送入寄存器AX</td><td>AX=18</td></tr><tr><td>mov ah,78</td><td>将78送入寄存器AH</td><td>AH=78</td></tr><tr><td>add ax,8</td><td>将寄存器AX中的数值加上8</td><td>AX=AX+8</td></tr><tr><td>mov ax,bx</td><td>将寄存器BX中的数据送入寄存器AX</td><td>AX=BX</td></tr><tr><td>add ax,bx</td><td>将AX和BX中的数值相加，结果存在AX种</td><td>AX=AX+BX</td></tr></tbody></table><p>注意，为了使具有高级语言基础的读者更好地理解指令的含义，有时会用文字描述和高级语言描述着两种方式来描述一条汇编指令的含义。在写一条汇编指令或一个寄存器的名称时不区分大小写。如：mov ax,18和MOV AX,18的含义相同；bx和BX的含义相同。</p><p>接下来看一下CPU执行上表中所列的程序段中的每条指令后，对寄存器中的数据进行的改变。<br>（原AX中的值：0000H，原BX中的值：0000H）</p><table><thead><tr><th>程序段中的指令</th><th>指令执行后AX中的数据</th><th>指令执行后</th></tr></thead><tbody><tr><td>mov ax,4E20H</td><td>4E20H</td><td>0000H</td></tr><tr><td>add ax,1406H</td><td>6226H</td><td>0000H</td></tr><tr><td>mov bx,2000H</td><td>6226H</td><td>2000H</td></tr><tr><td>add ax,bx</td><td>8226H</td><td>2000H</td></tr><tr><td>mov bx,ax</td><td>8226H</td><td>8226H</td></tr></tbody></table><p>在进行数据传送或运算时，要注意指令的两个操作对象的位数应当是一致的。</p><h3 id="2-4-物理地址"><a href="#2-4-物理地址" class="headerlink" title="2.4 物理地址"></a>2.4 物理地址</h3><p>CPU访问内存单元时，要给出内存单元的地址。所有内存单元构成的存储空间是一个一维的线性空间内，每一个内存单元再这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址。</p><p> CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的形成物理地址的方式。我们现在讨论8086CPU是如何在内部形成内存单元的物理地址的。</p><h3 id="2-5-16位结构的CPU"><a href="#2-5-16位结构的CPU" class="headerlink" title="2.5 16位结构的CPU"></a>2.5 16位结构的CPU</h3><p>概括地讲，16位结构（16位机、字长为16位等常见说法，与16位结构的含义相同）描述了一个CPU具有下面几方面的结构特性。</p><ul><li>运算器一次最多可以处理16位的数据；</li><li>寄存器的最大宽度为16位；</li><li>寄存器和运算器之间的通路为16位。</li></ul><p>8086是16位结构的CPU，这也就是说，在8086内部，能够一次性处理、传输、暂时存储的信息的最大长度是16位的。<br>内存单元的地址再送上地址总线之前，必须在CPU中处理、传输、暂时存放，对于16位CPU，能一次性处理、传输、暂时存储16位的地址。</p><h3 id="2-6-8086CPU给出物理地址的方法"><a href="#2-6-8086CPU给出物理地址的方法" class="headerlink" title="2.6 8086CPU给出物理地址的方法"></a>2.6 8086CPU给出物理地址的方法</h3><p>8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。<br>8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为1位。<br>从8086CPU的内部结构来看，如果将地址从内部简单地发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB。</p><p>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。</p><p>8086CPU要读写内存时：</p><ol><li>CPU中的相关部件提供两个16位地址，一个称为段地址，另一个称为偏移地址；</li><li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件；</li><li>地址加法器将两个16位地址合成为一个20位的物理地址；</li><li>地址加法器通过内部总线将20位物理地址送入输入输出控制电路；</li><li>输入输出控制电路将20位物理地址送上地址总线；</li><li>20位物理地址被地址总线传送到储存器。</li></ol><p>地址加法器采用<strong>物理地址=段地址×16+偏移地址</strong>的方法用段地址和偏移地址合成物理地址。</p><p>例如，8086CPU要访问地址为123C8H的内存单元，此时，地址加法器的工作过程如下所示：</p><ol><li>相关部件提供段地址和偏移地址（1230，00C8）</li><li>段地址和偏移地址送入（1230，00C8）</li><li>段地址×16（12300，00C8）</li><li>段地址×16+偏移地址，得出物理地址（12300+00C8=123C8）</li><li>输出物理地址（123C8）</li></ol><blockquote><p>由段地址×16引发的讨论</p><p>“段地址×16”有一个更为常见的说法是左移4位。<br>计算机中的所有信息都是以二进制的形式存储的，段地址当然也不例外。<br>机器只能处理二进制信息，“左移4位”中的位，指的是二进制位。</p><p> 我们来看一个例子，一个数据为2H，二进制形式为10B， 对其进行左移运算：</p><table><thead><tr><th>左移位数</th><th>二进制</th><th>十六进制</th><th>十进制</th></tr></thead><tbody><tr><td>0</td><td>10B</td><td>2H</td><td>2</td></tr><tr><td>1</td><td>100B</td><td>4H</td><td>4</td></tr><tr><td>2</td><td>1000B</td><td>8H</td><td>8</td></tr><tr><td>3</td><td>10000B</td><td>10H</td><td>16</td></tr><tr><td>4</td><td>100000B</td><td>20H</td><td>32</td></tr></tbody></table><p>观察上面移位次数和各种形式数据的关系，我们可以发现：</p><ol><li>一个数据的二进制形式左移1位，相当于该数据乘以2；</li><li>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；</li><li>地址加法器如何完成段地址×16的运算？就是将以二进制数据存放的段地址左移4位。</li></ol><p>进一步思考，我们可以看出：<br>一个数据的十六进制形式左移1位，相当于乘以16；<br>一个数据的十进制形式左移1位，相当于乘以10；<br>一个X进制的数据左移1位，相当于乘以X。</p></blockquote><h3 id="2-7-“段地址×16-偏移地址-x3D-物理地址”的本质含义"><a href="#2-7-“段地址×16-偏移地址-x3D-物理地址”的本质含义" class="headerlink" title="2.7 “段地址×16+偏移地址=物理地址”的本质含义"></a>2.7 “段地址×16+偏移地址=物理地址”的本质含义</h3><p>“段地址×16+偏移地址=物理地址”的本质含义是：<br>CPU在访问内存时，用一个基础地址（段地址×16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址。</p><p>更一般地说，8086CPU的这种寻址功能是<strong>“基础地址+偏移地址=物理地址”</strong>寻址模式的一种具体实现方案。<br>8086CPU中，段地址×16可看作是基础地址。</p><h3 id="2-8-段的概念"><a href="#2-8-段的概念" class="headerlink" title="2.8 段的概念"></a>2.8 段的概念</h3><p>段的划分来自于CPU，由于8086CPU用“基础地址（段地址）+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。</p><p>以后，在编程时可以根据需要， 将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。<br>有两点需要注意：<br>段地址×16必然是16的倍数，所以一个段的起始地址也一定是16的被上诉；<br>偏移地址为16位，16位地址的寻址能力为64KB，所以一个段的长度最大为64KB.</p><blockquote><p>内存单元地址小结</p><p>CPU访问内存单元时，必须向内存提供内存单元的物理地址。<br>8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址。</p><p>思考下面的两个问题</p><ol><li>观察下面的地址，你有什么发现？</li></ol><table><thead><tr><th>物理地址</th><th>段地址</th><th>偏移地址</th></tr></thead><tbody><tr><td>21F60H</td><td>2000H</td><td>1F60H</td></tr><tr><td></td><td>2100H</td><td>0F60H0</td></tr><tr><td></td><td>21F0H</td><td>0060H</td></tr><tr><td></td><td>21F6H</td><td>0000H</td></tr><tr><td></td><td>1F00H</td><td>2F60H</td></tr></tbody></table><p>结论：CPU可以用不同的段地址和偏移地址形成同一个物理地址。</p><p>比如CPU要访问21F60H单元，则它给出的段地址SA和偏移地址EA满足SA×16+EA=21F60H即可。</p><ol start="2"><li>如果给定一个段地址，仅通过变化偏移地址来进行，最多可定位多少个内存单元？</li></ol><p>结论：偏移地址16位，变化范围为0~FFFFH，仅用偏移地址来寻址最多可寻64KB个内存单元。</p><p>比如给定段地址1000H，用偏移地址寻址，CPU的寻址范围为：10000H~1FFFFH。</p><p>在8086PC机中，存储单元的地址用两个元素来描述，即段地址和偏移地址。</p><p>“数据在21F60内存单元中。”这句话对于8086PC机一般不这样讲，取而代之的是两种类似的说法：</p><ol><li>数据存在内存2100:1F60单元中；</li><li>数据存在内存的2000H段中的1F60H单元中。</li></ol><p>这两种描述都表示“数据在内存21F60H单元中”。</p><p>可以根据需要，将地址连续、起始地址为16的倍数的一组内存单元定义为一个段。</p></blockquote><h3 id="2-9-段寄存器"><a href="#2-9-段寄存器" class="headerlink" title="2.9 段寄存器"></a>2.9 段寄存器</h3><p>我们前面讲到，8086CPU在访问内存时要由相关部件提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址。<br>这里，需要看一下，是什么部件提供段地址。<br>段地址在8086CPU中的段寄存器中存放。<br>80986CPU中4个段寄存器：CS、DS、SS、ES。<br>当80986CPU要访问内存时由这4个段寄存器提供内存单元的段地址。本章中只看一下CS</p><h3 id="2-10-CS和IP"><a href="#2-10-CS和IP" class="headerlink" title="2.10 CS和IP"></a>2.10 CS和IP</h3><p>CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地址。<br>CS为代码段寄存器，IP为指令指针寄存器，从名称上我们可以看出它们和指令的关系。</p><p>在8086PC机中，任意时刻，CPU将CS:IP指向的内容当作指令执行。</p><p>8086CPU读取、执行指令的工作原理：</p><ol><li>8086CPU当前状态：CS中的内容为2000H，IP中的内容为0000H；；</li><li>内存20000H~20009H单元存放着可执行的机器码；</li><li>内存20000H~20009H单元中存放的机器码对应的汇编指令如下。</li></ol><p>地址：20000H<del>20002H，内容：B8 23 01，长度：3Byte，对应汇编指令： mov ax,0123H<br>地址：20000H</del>20002H，内容：B8 23 01，长度：3Byte，对应汇编指令： mov bx,0003H</p><hr><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《自学大全》（已弃坑）</title>
      <link href="/2022/12/19/zi-xue-da-quan-du-shu-bi-ji/"/>
      <url>/2022/12/19/zi-xue-da-quan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在网上看到这本书，有些好奇，便买下来了</p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="2022-12-19-16-11"><a href="#2022-12-19-16-11" class="headerlink" title="2022-12-19 16:11"></a>2022-12-19 16:11</h3><ul><li>用活动课的时间发了这篇文章，简单介绍缘由</li></ul><h3 id="2023-1-19-12-43"><a href="#2023-1-19-12-43" class="headerlink" title="2023-1-19 12:43"></a>2023-1-19 12:43</h3><ul><li>正式弃坑，因为这本书实在没有做笔记的必要</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>书的样子如下，但愿它能给我带来改变 :)</p><p><img src="https://s2.loli.net/2022/12/19/ZBsetCwbOy7kuhS.jpg" alt="自学大全"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-主题色更改及字体更换</title>
      <link href="/2022/12/17/zhu-ti-se-geng-gai-ji-zi-ti-geng-huan/"/>
      <url>/2022/12/17/zhu-ti-se-geng-gai-ji-zi-ti-geng-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>matery自带的红绿配色实在是有点辣眼，于是就改了一下，顺带换了个字体</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1622400">Matery主题自定义字体 - 腾讯云开发者社区-腾讯云 (tencent.com)</a><br><a href="https://blog.csdn.net/weixin_46399753/article/details/104768713">hexo中matery主题的个性化定制_Love——金哥哥的博客-CSDN博客_hexomatery</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/10/02/ce-shi/"/>
      <url>/2022/10/02/ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="只是一个测试"><a href="#只是一个测试" class="headerlink" title="只是一个测试"></a>只是一个测试</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-踩坑记录</title>
      <link href="/2022/10/02/cai-keng-ji-lu/"/>
      <url>/2022/10/02/cai-keng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>评论系统弄好之后，本来想按照<a href="https://github.com/DesertsP/Valine-Admin">DesertsP/Valine-Admin: 🔥A simple comment system based on LeanCloud and Valine.</a>弄一个评论的邮件提醒。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>结果弄到最后关键一步卡住了<br><img src="https://s2.loli.net/2022/10/02/dyHjhVugLs4cTtZ.png" alt="如图所示"></p><p>这个网站的域名实际上不属于我，如果要拥有自己的域名要花钱买，还要持续付费，买服务器等等，更不用说备案了，总之非常麻烦。</p><p>结果弄了很久，最后只能放弃。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>真想拥有自己的域名、服务器。估计要等到经济独立才行了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-关于博客宠物</title>
      <link href="/2022/10/02/guan-yu-bo-ke-chong-wu/"/>
      <url>/2022/10/02/guan-yu-bo-ke-chong-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>可以参考以下几篇文章<br><a href="https://zhuanlan.zhihu.com/p/350654582">Hexo-如何养一只博客宠物</a><br><a href="https://blog.csdn.net/qq_43020645/article/details/82794092">hexo 增添宠物</a></p><p>我只是个搬运工(#｀-_ゝ-)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-主题更换以及功能完善</title>
      <link href="/2022/10/01/bo-ke-ri-zhi-zhu-ti-geng-huan/"/>
      <url>/2022/10/01/bo-ke-ri-zhi-zhu-ti-geng-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>锵锵！现在网站完全变了一副模样😎<br>如果你也想零成本拥有属于自己的网站，可以参考这篇文章，<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本文主要是讲主题更换，具体可参考这篇文章，<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery，一个基于材料设计和响应式设计而成的全面、美观的Hexo主题</a>。<br>这是主题的官方文档，里面具体讲了如何安装主题并对其进行自定义。由于我已经折腾过一次，所以在安装及自定义上没有太大问题。<br>如果你在途中遇到了各种各样的问题，就百度吧，尽可能准确的描述自己的问题，并在海量的搜索结果中筛选可能有用的信息并进行尝试，倘若有错误代码，直接复制粘贴到搜索栏或许能更快地得到你想要的答案，在不断的试错中积累经验，在成功之后享受折腾的乐趣。</p><p>现在博客已经有了比较完整的功能，评论，文章分类、搜索、个人主页等等。</p><h2 id="插眼"><a href="#插眼" class="headerlink" title="插眼"></a>插眼</h2><h3 id="取消背景色："><a href="#取消背景色：" class="headerlink" title="取消背景色："></a>取消背景色：</h3><p>在theme主题目录下，找到<code>matery.css</code>文件,<code>ctrl+F</code>快捷键查找<code>.bg-cover:after</code>，注释掉即可。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* .bg-cover:after {    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>选自<a href="https://zhuanlan.zhihu.com/p/259728821">hexo-matery主题美化(四) - 知乎 (zhihu.com)</a></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p><a href="https://valine.js.org/quickstart.html">快速开始 | Valine 一款快速、简洁且高效的无后端评论系统。</a><br>关于valine的一些自定义设置：<a href="https://blog.chrelyonly.cn/2022/02/20/7/">valine评论修改方案 </a><br>一开始像按照教程修改，发现valine版本太低<del>（而我连更新都不会）</del>，找了好久，翻了官方文档，又到别人的博客翻了很长时间，终于找到了，[为使用matery主题的hexo增加Valine评论系统](<a href="https://blog.csdn.net/slow_sparrow/article/details/117753100#:~:text=%E6%89%93%E5%BC%80">https://blog.csdn.net/slow_sparrow/article/details/117753100#:~:text=打开</a> themes[%26ma%26]terylayout_partial 中找到 valine.ejs,，找到其中的 new Valine ，大概在249行，修改为以下内容：)<br><a href="https://unpkg.com/valine@1.5.1/dist/Valine.min.js">https://unpkg.com/valine@1.5.1/dist/Valine.min.js</a><br><a href="https://blog.csdn.net/cungudafa/article/details/105548858?ops_request_misc=%7B%22request_id%22:%22166468882316782417098800%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=166468882316782417098800&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-3-105548858-null-null.article_score_rank_blog&amp;utm_term=valine&amp;spm=1018.2226.3001.4450">Valine-1.4.4新版本尝鲜+个性制定（表情包、qq头像、UI样式）</a><br><a href="https://blog.csdn.net/cungudafa/article/details/106218905?ops_request_misc=%7B%22request_id%22:%22166468882316782417098800%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=166468882316782417098800&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106218905-null-null.article_score_rank_blog&amp;utm_term=valine&amp;spm=1018.2226.3001.4450">valine评论适配（最新版表情包接口，修改样式）</a><br><a href="https://lovelijunyi.gitee.io/posts/e52c.html">Valine评论系统详解</a><br>以上为可供参考的文章</p><h3 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h3><p><a href="https://www.tidio.com/panel/visitors">Tidio</a></p><h3 id="说说"><a href="#说说" class="headerlink" title="说说"></a>说说</h3><p><a href="https://yezhechenyang.gitee.io/2020/100614065.html">【Hexo】matery添加Artitalk说说</a><br>这个之前没折腾过，弄了好长时间，前前后后花了将近5个小时，找各种解决办法，总算成功了！😃（不过好像翻墙才能看）<br>记录一下关键问题的解决办法<br><a href="https://artitalk.js.org/demo.html">Artitalk.js</a><br><a href="https://www.shifeiti.com/blog/2022-08-23/">BBtalk 发表失败 403 的解决方案 - 是非题 (shifeiti.com)</a></p><h3 id="遇到的一个问题"><a href="#遇到的一个问题" class="headerlink" title="遇到的一个问题"></a>遇到的一个问题</h3><p><a href="https://blog.csdn.net/u012757419/article/details/105614028">git提示“warning: LF will be replaced by CRLF”的解决办法</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>虽然是第二次了，但仍然遇到很多新问题😣</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志-重新开始</title>
      <link href="/2022/10/01/chong-xin-kai-shi/"/>
      <url>/2022/10/01/chong-xin-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在（2022-10-01）这个网站变得十分简陋，只剩一个模板，其他文章以及主题都没有了。</p><p><img src="https://s2.loli.net/2022/10/01/n9uemfWK521HFgR.png" alt="现在（2022年10月1日）网站的样子"></p><p><img src="https://s2.loli.net/2022/10/01/mSl2Ivo4gNW5rEq.png" alt="之前的网站"><br>由于电脑重装系统后<del>（都怪自己手欠把电脑整废了）</del>，博客的本地文件被删除（上传文章需要用本地的博客文件来上传更新)，原来的网站成了空壳，我不能对其作任何修改，不能上传文章，不能更新主题，只能访问。</p><h2 id="再出发"><a href="#再出发" class="headerlink" title="再出发"></a>再出发</h2><p>于是利用某个假期，我重新在本地搭建好环境，准备从零开始再重复一遍之前的操作。<br>吸取上次的教训，我把博客本地文件放到onedrive里上传到云端，这样就能及时找回。（本来想用github，但不会弄💧）<br><img src="https://s2.loli.net/2022/10/01/tFWPB7xcq5N8lL6.png" alt="我特意为此扩容了OneDrive"></p><h3 id="那原来的网站呢？"><a href="#那原来的网站呢？" class="headerlink" title="那原来的网站呢？"></a>那原来的网站呢？</h3><p>虽然那个博客已被废弃，但上面还是有很多东西值得留下来的，我在GitHub上新建了一个分支，将旧的网页文件存进去，这样只要我想，我就可以再访问那个旧博客。（后来我试了一下，发现不行）<br><img src="https://s2.loli.net/2022/10/01/sCFRtdHOlpDVPq9.png" alt="如图"></p><p>我打算更加充分的利用这个网站，不再仅仅追求将界面弄得如何的华丽，而注重优质内容的创作。我会出一个系列专门记录这个网站的成长，一方面作为回忆过去时可以翻看的材料，另一方面一方面总结经验。此外也会发一些其他类型的文章，日常、划水之类的，以丰富网站的内容。</p><h2 id="一个简单的自我介绍"><a href="#一个简单的自我介绍" class="headerlink" title="一个简单的自我介绍"></a>一个简单的自我介绍</h2><p>本人只是一个普通的高中生，一大爱好是折腾，不过这种折腾没有什么技术含量，仅仅是流于表面，跟着教程按部就班地弄一些花里胡哨的东西，不过我乐此不疲。</p><p>由于站主水平有限，写出来的文章往往存在很多问题，可以在评论区<del>（现在甚至连评论系统都没有）</del>提出建议。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一起来见证这个网站蜕变的点点滴滴吧！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
